{"version":3,"file":"otpus.min.js","sources":["../lib/fast-sha256.js","../node_modules/base64-js/index.js","../node_modules/ieee754/index.js","../node_modules/buffer/index.js","../node_modules/meta-buffer-pack/src/meta-buffer-pack.js","../src/otpus-sha256.js","../src/otpus-util.js","../src/otpus.js","../src/webcrypto.js"],"sourcesContent":["// SHA-256 (+ HMAC and PBKDF2) for JavaScript.\n//\n// Written in 2014-2016 by Dmitry Chestnykh.\n// Public domain, no warranty.\n//\n// Functions (accept and return Uint8Arrays):\n//\n//   sha256(message) -> hash\n//   sha256.hmac(key, message) -> mac\n//   sha256.pbkdf2(password, salt, rounds, dkLen) -> dk\n//\n//  Classes:\n//\n//   new sha256.Hash()\n//   new sha256.HMAC(key)\n//\nexport var digestLength = 32\nexport var blockSize = 64\n// SHA-256 constants\nconst K = new Uint32Array([\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b,\n  0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01,\n  0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7,\n  0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152,\n  0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147,\n  0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc,\n  0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819,\n  0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08,\n  0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f,\n  0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n])\nfunction hashBlocks (w, v, p, pos, len) {\n  let a, b, c, d, e, f, g, h, u, i, j, t1, t2\n  while (len >= 64) {\n    a = v[0]\n    b = v[1]\n    c = v[2]\n    d = v[3]\n    e = v[4]\n    f = v[5]\n    g = v[6]\n    h = v[7]\n    for (i = 0; i < 16; i++) {\n      j = pos + i * 4\n      w[i] = (((p[j] & 0xff) << 24) | ((p[j + 1] & 0xff) << 16) |\n                ((p[j + 2] & 0xff) << 8) | (p[j + 3] & 0xff))\n    }\n    for (i = 16; i < 64; i++) {\n      u = w[i - 2]\n      t1 = (u >>> 17 | u << (32 - 17)) ^ (u >>> 19 | u << (32 - 19)) ^ (u >>> 10)\n      u = w[i - 15]\n      t2 = (u >>> 7 | u << (32 - 7)) ^ (u >>> 18 | u << (32 - 18)) ^ (u >>> 3)\n      w[i] = (t1 + w[i - 7] | 0) + (t2 + w[i - 16] | 0)\n    }\n    for (i = 0; i < 64; i++) {\n      t1 = (((((e >>> 6 | e << (32 - 6)) ^ (e >>> 11 | e << (32 - 11)) ^\n                (e >>> 25 | e << (32 - 25))) + ((e & f) ^ (~e & g))) | 0) +\n                ((h + ((K[i] + w[i]) | 0)) | 0)) | 0\n      t2 = (((a >>> 2 | a << (32 - 2)) ^ (a >>> 13 | a << (32 - 13)) ^\n                (a >>> 22 | a << (32 - 22))) + ((a & b) ^ (a & c) ^ (b & c))) | 0\n      h = g\n      g = f\n      f = e\n      e = (d + t1) | 0\n      d = c\n      c = b\n      b = a\n      a = (t1 + t2) | 0\n    }\n    v[0] += a\n    v[1] += b\n    v[2] += c\n    v[3] += d\n    v[4] += e\n    v[5] += f\n    v[6] += g\n    v[7] += h\n    pos += 64\n    len -= 64\n  }\n  return pos\n}\n// Hash implements SHA256 hash algorithm.\nconst Hash = /** @class */ (function () {\n  function Hash () {\n    this.digestLength = digestLength\n    this.blockSize = blockSize\n    // Note: Int32Array is used instead of Uint32Array for performance reasons.\n    this.state = new Int32Array(8) // hash state\n    this.temp = new Int32Array(64) // temporary state\n    this.buffer = new Uint8Array(128) // buffer for data to hash\n    this.bufferLength = 0 // number of bytes in buffer\n    this.bytesHashed = 0 // number of total bytes hashed\n    this.finished = false // indicates whether the hash was finalized\n    this.reset()\n  }\n  // Resets hash state making it possible\n  // to re-use this instance to hash other data.\n  Hash.prototype.reset = function () {\n    this.state[0] = 0x6a09e667\n    this.state[1] = 0xbb67ae85\n    this.state[2] = 0x3c6ef372\n    this.state[3] = 0xa54ff53a\n    this.state[4] = 0x510e527f\n    this.state[5] = 0x9b05688c\n    this.state[6] = 0x1f83d9ab\n    this.state[7] = 0x5be0cd19\n    this.bufferLength = 0\n    this.bytesHashed = 0\n    this.finished = false\n    return this\n  }\n  // Cleans internal buffers and re-initializes hash state.\n  Hash.prototype.clean = function () {\n    for (var i = 0; i < this.buffer.length; i++) {\n      this.buffer[i] = 0\n    }\n    for (var i = 0; i < this.temp.length; i++) {\n      this.temp[i] = 0\n    }\n    this.reset()\n  }\n  // Updates hash state with the given data.\n  //\n  // Optionally, length of the data can be specified to hash\n  // fewer bytes than data.length.\n  //\n  // Throws error when trying to update already finalized hash:\n  // instance must be reset to use it again.\n  Hash.prototype.update = function (data, dataLength) {\n    if (dataLength === void 0) { dataLength = data.length }\n    if (this.finished) {\n      throw new Error(\"SHA256: can't update because hash was finished.\")\n    }\n    let dataPos = 0\n    this.bytesHashed += dataLength\n    if (this.bufferLength > 0) {\n      while (this.bufferLength < 64 && dataLength > 0) {\n        this.buffer[this.bufferLength++] = data[dataPos++]\n        dataLength--\n      }\n      if (this.bufferLength === 64) {\n        hashBlocks(this.temp, this.state, this.buffer, 0, 64)\n        this.bufferLength = 0\n      }\n    }\n    if (dataLength >= 64) {\n      dataPos = hashBlocks(this.temp, this.state, data, dataPos, dataLength)\n      dataLength %= 64\n    }\n    while (dataLength > 0) {\n      this.buffer[this.bufferLength++] = data[dataPos++]\n      dataLength--\n    }\n    return this\n  }\n  // Finalizes hash state and puts hash into out.\n  //\n  // If hash was already finalized, puts the same value.\n  Hash.prototype.finish = function (out) {\n    if (!this.finished) {\n      const bytesHashed = this.bytesHashed\n      const left = this.bufferLength\n      const bitLenHi = (bytesHashed / 0x20000000) | 0\n      const bitLenLo = bytesHashed << 3\n      const padLength = (bytesHashed % 64 < 56) ? 64 : 128\n      this.buffer[left] = 0x80\n      for (var i = left + 1; i < padLength - 8; i++) {\n        this.buffer[i] = 0\n      }\n      this.buffer[padLength - 8] = (bitLenHi >>> 24) & 0xff\n      this.buffer[padLength - 7] = (bitLenHi >>> 16) & 0xff\n      this.buffer[padLength - 6] = (bitLenHi >>> 8) & 0xff\n      this.buffer[padLength - 5] = (bitLenHi >>> 0) & 0xff\n      this.buffer[padLength - 4] = (bitLenLo >>> 24) & 0xff\n      this.buffer[padLength - 3] = (bitLenLo >>> 16) & 0xff\n      this.buffer[padLength - 2] = (bitLenLo >>> 8) & 0xff\n      this.buffer[padLength - 1] = (bitLenLo >>> 0) & 0xff\n      hashBlocks(this.temp, this.state, this.buffer, 0, padLength)\n      this.finished = true\n    }\n    for (var i = 0; i < 8; i++) {\n      out[i * 4 + 0] = (this.state[i] >>> 24) & 0xff\n      out[i * 4 + 1] = (this.state[i] >>> 16) & 0xff\n      out[i * 4 + 2] = (this.state[i] >>> 8) & 0xff\n      out[i * 4 + 3] = (this.state[i] >>> 0) & 0xff\n    }\n    return this\n  }\n  // Returns the final hash digest.\n  Hash.prototype.digest = function () {\n    const out = new Uint8Array(this.digestLength)\n    this.finish(out)\n    return out\n  }\n  // Internal function for use in HMAC for optimization.\n  Hash.prototype._saveState = function (out) {\n    for (let i = 0; i < this.state.length; i++) {\n      out[i] = this.state[i]\n    }\n  }\n  // Internal function for use in HMAC for optimization.\n  Hash.prototype._restoreState = function (from, bytesHashed) {\n    for (let i = 0; i < this.state.length; i++) {\n      this.state[i] = from[i]\n    }\n    this.bytesHashed = bytesHashed\n    this.finished = false\n    this.bufferLength = 0\n  }\n  return Hash\n}())\nexport { Hash }\n// HMAC implements HMAC-SHA256 message authentication algorithm.\nconst HMAC = /** @class */ (function () {\n  function HMAC (key) {\n    this.inner = new Hash()\n    this.outer = new Hash()\n    this.blockSize = this.inner.blockSize\n    this.digestLength = this.inner.digestLength\n    const pad = new Uint8Array(this.blockSize)\n    if (key.length > this.blockSize) {\n      (new Hash()).update(key).finish(pad).clean()\n    } else {\n      for (var i = 0; i < key.length; i++) {\n        pad[i] = key[i]\n      }\n    }\n    for (var i = 0; i < pad.length; i++) {\n      pad[i] ^= 0x36\n    }\n    this.inner.update(pad)\n    for (var i = 0; i < pad.length; i++) {\n      pad[i] ^= 0x36 ^ 0x5c\n    }\n    this.outer.update(pad)\n    this.istate = new Uint32Array(8)\n    this.ostate = new Uint32Array(8)\n    this.inner._saveState(this.istate)\n    this.outer._saveState(this.ostate)\n    for (var i = 0; i < pad.length; i++) {\n      pad[i] = 0\n    }\n  }\n  // Returns HMAC state to the state initialized with key\n  // to make it possible to run HMAC over the other data with the same\n  // key without creating a new instance.\n  HMAC.prototype.reset = function () {\n    this.inner._restoreState(this.istate, this.inner.blockSize)\n    this.outer._restoreState(this.ostate, this.outer.blockSize)\n    return this\n  }\n  // Cleans HMAC state.\n  HMAC.prototype.clean = function () {\n    for (let i = 0; i < this.istate.length; i++) {\n      this.ostate[i] = this.istate[i] = 0\n    }\n    this.inner.clean()\n    this.outer.clean()\n  }\n  // Updates state with provided data.\n  HMAC.prototype.update = function (data) {\n    this.inner.update(data)\n    return this\n  }\n  // Finalizes HMAC and puts the result in out.\n  HMAC.prototype.finish = function (out) {\n    if (this.outer.finished) {\n      this.outer.finish(out)\n    } else {\n      this.inner.finish(out)\n      this.outer.update(out, this.digestLength).finish(out)\n    }\n    return this\n  }\n  // Returns message authentication code.\n  HMAC.prototype.digest = function () {\n    const out = new Uint8Array(this.digestLength)\n    this.finish(out)\n    return out\n  }\n  return HMAC\n}())\nexport { HMAC }\n// Returns SHA256 hash of data.\nexport function hash (data) {\n  const h = (new Hash()).update(data)\n  const digest = h.digest()\n  h.clean()\n  return digest\n}\n// Function hash is both available as module.hash and as default export.\nexport default hash\n// Returns HMAC-SHA256 of data under the key.\nexport function hmac (key, data) {\n  const h = (new HMAC(key)).update(data)\n  const digest = h.digest()\n  h.clean()\n  return digest\n}\n// Fills hkdf buffer like this:\n// T(1) = HMAC-Hash(PRK, T(0) | info | 0x01)\nfunction fillBuffer (buffer, hmac, info, counter) {\n  // Counter is a byte value: check if it overflowed.\n  const num = counter[0]\n  if (num === 0) {\n    throw new Error('hkdf: cannot expand more')\n  }\n  // Prepare HMAC instance for new data with old key.\n  hmac.reset()\n  // Hash in previous output if it was generated\n  // (i.e. counter is greater than 1).\n  if (num > 1) {\n    hmac.update(buffer)\n  }\n  // Hash in info if it exists.\n  if (info) {\n    hmac.update(info)\n  }\n  // Hash in the counter.\n  hmac.update(counter)\n  // Output result to buffer and clean HMAC instance.\n  hmac.finish(buffer)\n  // Increment counter inside typed array, this works properly.\n  counter[0]++\n}\nconst hkdfSalt = new Uint8Array(digestLength) // Filled with zeroes.\nexport function hkdf (key, salt, info, length) {\n  if (salt === void 0) { salt = hkdfSalt }\n  if (length === void 0) { length = 32 }\n  const counter = new Uint8Array([1])\n  // HKDF-Extract uses salt as HMAC key, and key as data.\n  const okm = hmac(salt, key)\n  // Initialize HMAC for expanding with extracted key.\n  // Ensure no collisions with `hmac` function.\n  const hmac_ = new HMAC(okm)\n  // Allocate buffer.\n  const buffer = new Uint8Array(hmac_.digestLength)\n  let bufpos = buffer.length\n  const out = new Uint8Array(length)\n  for (let i = 0; i < length; i++) {\n    if (bufpos === buffer.length) {\n      fillBuffer(buffer, hmac_, info, counter)\n      bufpos = 0\n    }\n    out[i] = buffer[bufpos++]\n  }\n  hmac_.clean()\n  buffer.fill(0)\n  counter.fill(0)\n  return out\n}\n// Derives a key from password and salt using PBKDF2-HMAC-SHA256\n// with the given number of iterations.\n//\n// The number of bytes returned is equal to dkLen.\n//\n// (For better security, avoid dkLen greater than hash length - 32 bytes).\nexport function pbkdf2 (password, salt, iterations, dkLen) {\n  const prf = new HMAC(password)\n  const len = prf.digestLength\n  const ctr = new Uint8Array(4)\n  const t = new Uint8Array(len)\n  const u = new Uint8Array(len)\n  const dk = new Uint8Array(dkLen)\n  for (var i = 0; i * len < dkLen; i++) {\n    const c = i + 1\n    ctr[0] = (c >>> 24) & 0xff\n    ctr[1] = (c >>> 16) & 0xff\n    ctr[2] = (c >>> 8) & 0xff\n    ctr[3] = (c >>> 0) & 0xff\n    prf.reset()\n    prf.update(salt)\n    prf.update(ctr)\n    prf.finish(u)\n    for (var j = 0; j < len; j++) {\n      t[j] = u[j]\n    }\n    for (var j = 2; j <= iterations; j++) {\n      prf.reset()\n      prf.update(u).finish(u)\n      for (let k = 0; k < len; k++) {\n        t[k] ^= u[k]\n      }\n    }\n    for (var j = 0; j < len && i * len + j < dkLen; j++) {\n      dk[i * len + j] = t[j]\n    }\n  }\n  for (var i = 0; i < len; i++) {\n    t[i] = u[i] = 0\n  }\n  for (var i = 0; i < 4; i++) {\n    ctr[i] = 0\n  }\n  prf.clean()\n  return dk\n}\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nconst base64 = require('base64-js')\nconst ieee754 = require('ieee754')\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n","import { Buffer } from 'buffer/index.js'\nexport { Buffer } // for iife reference MBP.Buffer\nconst encoder = new TextEncoder()\nconst decoder = new TextDecoder()\n\n\nexport const NB = numberBuffer\nexport function numberBuffer(type, initValue = 0) {\n  let buffer\n  if (type === undefined || typeof type !== 'string' || typeof initValue !== 'number') {\n    throw TypeError('invlaid init variablie type name. ')\n  }\n  type = type.toUpperCase()\n\n  if (type.includes('8')) {\n    buffer = Buffer.alloc(1)\n    if (type.includes('I')) buffer.writeInt8(initValue)\n    else buffer.writeUint8(initValue)\n  } else if (type.includes('16')) {\n    buffer = Buffer.alloc(2)\n    if (type.includes('I')) {\n      if (type.includes('L')) buffer.writeInt16LE(initValue)\n      else buffer.writeInt16BE(initValue)\n    } else {\n      if (type.includes('L')) buffer.writeUint16LE(initValue)\n      else buffer.writeUint16BE(initValue)\n    }\n  } else if (type.includes('32')) {\n    buffer = Buffer.alloc(4)\n    if (type.includes('I')) {\n      if (type.includes('L')) buffer.writeInt32LE(initValue)\n      else buffer.writeInt32BE(initValue)\n    } else {\n      if (type.includes('L')) buffer.writeUint32LE(initValue)\n      else buffer.writeUint32BE(initValue)\n    }\n  } else if (type.includes('F')) {\n    buffer = Buffer.alloc(4)\n    if (type.includes('L')) {\n      buffer.writeFloatLE(initValue)\n    } else {\n      buffer.writeFloatBE(initValue)\n    }\n  } else if (type.includes('N')) { // number as string\n    buffer = Buffer.from(String(initValue))\n  } else {\n    console.log(`invalid type: ${type} or initvalue: ${initValue}`)\n  }\n  return buffer\n}\n\n\nexport const MB = metaBuffer\nexport function metaBuffer(name, typeOrData, initValue) {\n  let buffer\n  let bufferType = 'B'\n  if (typeof typeOrData === 'number') {\n    if (typeof initValue === 'number') {  // initValue 0 should be passed.\n      buffer = Buffer.alloc(typeOrData)\n      if( initValue !== 0) buffer.fill(initValue)\n      bufferType = 'B'\n    } else {\n      buffer = Buffer.from(String(typeOrData))\n      bufferType = 'N'\n    }\n  } else if (typeof typeOrData === 'string' && typeof initValue === 'number') { // number with type.\n    bufferType = typeOrData.toUpperCase() // use explicit type name\n    buffer = numberBuffer(typeOrData, initValue) // notice.  two categories.  n: number string.  8, 16, 32: typed number.\n  } else if (typeof typeOrData === 'string' && initValue === undefined) { //  string buffer\n    buffer = Buffer.from(typeOrData)\n    bufferType = 'S'\n  } else if (typeOrData instanceof Uint8Array && initValue === undefined) { // buffer | Uint8Array\n    // Buffer.from:  Copies the passed buffer data onto a new Buffer instance.\n    // typecasting Uint8Array to Buffer.\n    buffer = (typeOrData instanceof Buffer) ? typeOrData : Buffer.from(typeOrData)\n  } else if (typeOrData instanceof ArrayBuffer && initValue === undefined) { // arrayBuffer\n    // Notice. typedArray is recommended instead of arrayBuffer\n    buffer = Buffer.from(typeOrData)\n  } else if (ArrayBuffer.isView(typeOrData)) { // typedarray buffer\n    buffer = Buffer.from(typeOrData.buffer, typeOrData.byteOffset, typeOrData.byteLength)\n  } else if (typeof typeOrData === 'object' && initValue === undefined) { //   object. like array. stringify\n    buffer = Buffer.from(JSON.stringify(typeOrData))\n    bufferType = 'O'\n  } else if (typeof typeOrData === 'boolean' && initValue === undefined) { //   object. like array. stringify\n    const v = typeOrData ? 1 : 0\n    buffer = Buffer.from([v])\n    bufferType = '!'\n  } else {\n    throw TypeError('invalid meta buffer type')\n  }\n\n  if (typeof name === 'string' && name.includes('#')) name = '' //\n\n  return [name, bufferType, buffer]\n}\n\nexport const MBA = metaBufferArguments\nexport function metaBufferArguments(...args) {\n  let i = 0\n  const mba = args.map(\n    data => {\n      const argsIndex = i++\n      // tip. MBA use index number as metabuffer's property name.\n      if (typeof data === 'number') {\n        // * JS's primitive Number stored as string.\n        return MB(argsIndex, 'N', data)\n      } else {\n        // typedarray, dataview, array, object, boolean\n        return MB(argsIndex, data)\n      }\n    })\n\n  return mba\n}\n\nexport function parseTypeName(type) {\n  type = type.toUpperCase()\n\n  if (type.includes('8')) {\n    if (type.includes('I')) {\n      return 'int8'\n    } else {\n      return 'uint8'\n    }\n  } else if (type.includes('16')) {\n    if (type.includes('I')) {\n      if (type.includes('L')) {\n        return 'int16_le'\n      } else {\n        return 'int16_be'\n      }\n    } else {\n      if (type.includes('L')) {\n        return 'uint16_le'\n      } else {\n        return 'uint16_be'\n      }\n    }\n  } else if (type.includes('32')) {\n    if (type.includes('I')) {\n      if (type.includes('L')) {\n        return 'int32_le'\n      } else {\n        return 'int32_be'\n      }\n    } else {\n      if (type.includes('L')) {\n        return 'uint32_le'\n      } else {\n        return 'uint32_be'\n      }\n    }\n  } else if (type.includes('F')) {\n    if (type.includes('L')) {\n      return 'float_le'\n    } else {\n      return 'float_be'\n    }\n  } else if (type === 'B') {\n    return 'buffer'\n  } else if (type === 'S') { // string or arguments\n    return 'string'\n  } else if (type === 'N') { // number encoded as string\n    return 'number'\n  } else if (type === 'O') { // object encoded string\n    return 'object'\n  } else if (type === '!') { // boolean  1:true 0:false\n    return 'boolean'\n  } else {\n    throw TypeError('invalid data type')\n  }\n\n}\n\nexport function readTypedBuffer(simpleType, buffer, offset, length) {\n\n  const type = parseTypeName(simpleType)\n\n  if (type == 'int8') return buffer.readInt8(offset)\n  else if (type === 'uint8') return buffer.readUint8(offset)\n  else if (type === 'int16_le') return buffer.readInt16LE(offset)\n  else if (type === 'int16_be') return buffer.readInt16BE(offset)\n  else if (type === 'uint16_le') return buffer.readUint16LE(offset)\n  else if (type === 'uint16_be') return buffer.readUint16BE(offset)\n  else if (type === 'int32_le') return buffer.readInt32LE(offset)\n  else if (type === 'int32_be') return buffer.readInt32BE(offset)\n  else if (type === 'uint32_le') return buffer.readUint32LE(offset)\n  else if (type === 'uint32_be') return buffer.readUint32BE(offset)\n  else if (type === 'float_le') return buffer.readFloatLE(offset)\n  else if (type === 'float_be') return buffer.readFloatBE(offset)\n\n  else if (type === 'buffer') {\n    return buffer.subarray(offset, offset + length)\n  } else if (type === 'string') {\n    const strBuffer = buffer.subarray(offset, offset + length)\n    return decoder.decode(strBuffer)\n  } else if (type === 'number') {\n    const strNumber = buffer.subarray(offset, offset + length)\n    return Number(decoder.decode(strNumber))\n  } else if (type === 'object') {\n    const objEncoded = buffer.subarray(offset, offset + length)\n    try {\n      return JSON.parse(decoder.decode(objEncoded))\n    } catch (error) {\n      console.log('err. obj parse')\n    }\n  } else if (type === 'boolean') {\n    const v = buffer.readInt8(offset)\n    return v === 1\n  } else {\n    throw TypeError('invalid data')\n  }\n}\n\nfunction flatSubArray(args) {\n  let subArr = []\n  const mainArr = args.filter(item => {\n    if (Array.isArray(item[0])) subArr = subArr.concat(item)\n    else return item\n  })\n  return mainArr.concat(subArr)\n}\n\nexport function pack(...args) {\n  const bufArr = flatSubArray(args)\n  let size = 0\n  const info = []\n  let offset = 0\n\n  bufArr.forEach(bufPack => {\n    const [name, type, data] = bufPack\n    size += data.byteLength\n\n    if (typeof name === 'number' || name.length > 0) {\n    // MBA item use number type name.\n    // MB item use string type name.   null string means omit.\n    \n    // change to store more informative meta info.  \n    info.push([name, type, offset, data.byteLength]) \n    \n    }\n    offset = size\n  })\n\n\n  let infoEncoded\n  let infoSize\n\n  if (info.length > 0) {\n    let infoStr = JSON.stringify(info)\n    // console.log('pack infoStr , size:', infoStr , infoStr.length )\n    infoEncoded = encoder.encode(infoStr)\n    infoSize = infoEncoded.byteLength\n    size = size + infoSize + 2\n  }\n\n  const buffer = Buffer.alloc(size)\n  offset = 0\n  bufArr.forEach(bufPack => {\n    const buf = bufPack[2]\n    buffer.set(buf, offset)\n    offset += buf.byteLength\n  })\n\n  if (info.length > 0) {\n    buffer.set(infoEncoded, offset)\n    const infoSizeBuff = NB('16', infoSize)\n    buffer.set(infoSizeBuff, offset + infoSize)\n    return buffer\n  } else {\n    return buffer\n  }\n}\n\n\n/**\n * unpack() will use embeded meta info from the binary pack.  \n * You can specify (optional) meta obejct. \n * (It's useful to read pure buffer data.)\n * \n * You can get the meta object from:  getFrame(pack) , meta()\n * @param {Buffer|Uint8Array} binPack binaryData\n * @param {Object} meta *OPTION*  \n * @returns {Object|undefined} success: return Object (include buffer data).   fail: return undefined\n */\nexport function unpack(binPack, meta) {\n\n  const infoArr = meta || getMeta(binPack)\n  if (!infoArr) return\n\n  const buffer = Buffer.from(binPack)\n  const binObj = {}\n  let readCounter = 0\n  infoArr.forEach(bufPack => {\n    const [name, type, offset, length] = bufPack\n    binObj[name] = readTypedBuffer(type, buffer, offset, length)\n    // console.log( '###3 len',length )\n    if( length) readCounter += length\n  })\n\n  // Can not define meta for variable size buffer \n  // unpacker support automatic property to read left(did't read) buffers.\n  // console.log(\"######, unpack: buffer \" , readCounter, buffer ,buffer.byteLength)\n  if(  meta && buffer.byteLength !== readCounter ){\n    let leftSize = buffer.byteLength - readCounter\n    // console.log('total,left buffer size', buffer.byteLength, leftSize )\n    binObj[\"$OTHERS\"] = readTypedBuffer('b', buffer, readCounter, leftSize)\n  }\n\n  // set args with values if exist.\n  let mbaIndex = 0;\n  let args = [];\n  while( binObj[mbaIndex]){\n    args.push( binObj[mbaIndex++])\n  }\n  \n  if( args.length > 0 ) {\n    binObj.args = args \n    binObj.$ = binObj.args \n  }\n\n  return binObj\n\n}\n\n\n\nexport const U8 = parseUint8Array   //alias\n/**\n * \n * @param {any} data \n * @param {Boolean} shareArrayBuffer false(default):  return new( or copied) ArrayBuffer.    true: share the input data's arrayBuffer.\n * @returns {Uint8Array}\n */\nexport function parseUint8Array(data, shareArrayBuffer = false) {\n  if (data === undefined) throw TypeError('Invalid data type: Undefined')\n  if (typeof data === 'string') {\n    return encoder.encode(data)\n  } else if (typeof data === 'number') { // number -> 1 byte uint8array(number)\n    return Uint8Array.from([data])\n  } else if (data instanceof ArrayBuffer) { // arraybuffer -> wrap uint8array(ab)\n    if (shareArrayBuffer) {\n      return new Uint8Array(data)\n    } else {\n      const originData = new Uint8Array(data)\n      const dataCopy = new Uint8Array(data.byteLength)\n      dataCopy.set(originData)\n      return dataCopy\n    }\n  } else if (ArrayBuffer.isView(data)) { // accept Buffer too.\n    if (shareArrayBuffer) {\n      return new Uint8Array(data.buffer, data.byteOffset, data.byteLength) // DataView, TypedArray >  uint8array( use offset, length )\n    } else {\n      // new memory to protect origin arraybuffer.\n      const originData = new Uint8Array(data.buffer, data.byteOffset, data.byteLength)\n      const dataCopy = new Uint8Array(data.byteLength)\n      dataCopy.set(originData)\n      return dataCopy\n    }\n  } else { // array, object\n    return encoder.encode(JSON.stringify(data)) // object(array.. )  > JSON.str > encode > unint8array\n  }\n}\n\nexport const B8 = parseBuffer\n\nexport function parseBuffer(data, shareArrayBuffer = false) {\n\n  const u8 = parseUint8Array(data, shareArrayBuffer)\n  if( shareArrayBuffer){\n    return Buffer.from( u8.buffer, u8.byteOffset, u8.byteLength )\n  }else{\n    return Buffer.from(u8)\n  }\n}\n\nexport const B8pack = parseBufferThenConcat\nexport function parseBufferThenConcat(...dataArray) {\n  const buffers = dataArray.map(data => parseBuffer(data))\n  return Buffer.concat( buffers)\n}\n\n\nexport const U8pack = parseUint8ThenConcat // alias\n/**\n * 1. parse list of data into U8 list\n * 2. return new Uint8Array merged.\n * @param  {...any} dataArray \n * @returns \n */\nexport function parseUint8ThenConcat(...dataArray) {\n  try {\n    let bufferSize = 0\n    let offset = 0\n    const buffers = dataArray.map(data => parseUint8Array(data))\n    buffers.forEach(buf => { bufferSize += buf.byteLength })\n    const buffer = new Uint8Array(bufferSize)\n    buffers.forEach(buf => {\n      buffer.set(buf, offset)\n      offset += buf.byteLength\n    })\n    return buffer\n  } catch (error) {\n    console.log(error)\n  }\n}\n\nexport function hex(buffer) {\n  return Array.prototype.map.call(new Uint8Array(buffer), x => ('00' + x.toString(16)).slice(-2)).join('')\n}\n\nexport function equal(buf1, buf2) {\n  if (buf1.byteLength !== buf2.byteLength) return false\n  for (let i = 0; i < buf1.byteLength; i++) {\n    if (buf1[i] !== buf2[i]) return false\n  }\n  return true\n}\n\n\n\n\nexport function getBufferSize(binPack) {\n  if (getMetaSize(binPack) === 0) {\n    return binPack.byteLength\n  } else {\n    return binPack.byteLength - getMetaSize(binPack) - TAIL_LEN\n  }\n\n}\n\n// MB and MBA \nexport function parseMetaInfo(binPack, infoSize) {\n  let info;\n  try {\n    const buffer = new Uint8Array(binPack.buffer, binPack.byteOffset, binPack.byteLength)\n    const infoFrom = buffer.byteLength - infoSize - 2\n    const infoEncoded = buffer.subarray(infoFrom, buffer.byteLength - 2)\n    const decoded = decoder.decode(infoEncoded)\n    const info = JSON.parse(decoded)\n\n    if (!Array.isArray(info) || !Array.isArray(info[0])) return\n\n    let firstItem = info[0]\n    if (!firstItem) return\n\n    if (firstItem.length < 3) return\n    const [name, type, offset] = firstItem\n\n    if ( typeof type !== 'string' || typeof offset !== 'number') return\n\n    return info\n  } catch (error) {\n    // return undefined\n  }\n}\n\n\n/** \n * Meta buffer pack Tail:\n * binary Pack include TAIL(two bytes size) info at the end if it has JSON info.\n * not include TAIL if it has not JSON.\n */\nexport const TAIL_LEN = 2\n\n/**\n * \n * @param {Buffer|Uint8Array|ArrayBuffer} binPack \n * @returns {Number} last two byte value( read Uint16 bigendian )\n */\nexport function readTail(binPack) {\n  if( binPack instanceof ArrayBuffer ){\n    binPack = Buffer.from(binPack) // creates a view for ArrayBuffer, without copying.\n  } \n  if (binPack instanceof Uint8Array) {\n    if (binPack.byteLength <= TAIL_LEN) return 0\n\n    const dv = new DataView(binPack.buffer, binPack.byteOffset, binPack.byteLength)\n    const infoSize = dv.getUint16(binPack.byteLength - TAIL_LEN)  // last 2 bytes for json-info-length.\n    return infoSize\n\n  } else {\n    // throw TypeError('invalid data type.')\n    return 0\n  }\n\n}\n\n\n// binay data pack is not always Buffer.  \n// It should accept Uint8Array binPack.\n// This function don't use Buffer method.\n\nexport function getMetaSize(binPack) {\n  if( binPack instanceof ArrayBuffer ){\n    binPack = Buffer.from(binPack) // creates a view for ArrayBuffer, without copying.\n  } \n  if (binPack instanceof Uint8Array) {\n\n    const size = binPack.byteLength\n    if (size <= TAIL_LEN) return 0\n\n    //1. tail size check\n    const infoSize = readTail(binPack)\n    if (infoSize === 0 || infoSize > size) return 0\n    //2. try parse JSON \n    const success = parseMetaInfo(binPack, infoSize)\n    //3. return success: jsonInfoSize,  fail: 0\n    if (success) return infoSize\n    else return 0\n  }else{\n    return 0\n  }\n}\n\n\n/**\n * \n * @param {Buffer|Uint8Array} binPack \n * @returns {Buffer} \n */\nexport function getBuffer(binPack) {\n  const rawBufferSize = getBufferSize(binPack)\n  return binPack.subarray(0, rawBufferSize)\n}\n\n\n\n/**\n * extract Meta info object if it has.\n * \n * @param {Buffer|Uint8Array|ArrayBuffer} binPack \n * @param {Boolean} showDetail add additional item info: full data type name and bytelength.\n * @returns {Object|undefined} success: return MetaInfo Object.   fail: return undefined.(No valid JSON included.)\n */\nexport function getMeta(binPack, showDetail = false) {\n  if( binPack instanceof ArrayBuffer ){\n    binPack = Buffer.from(binPack) // creates a view for ArrayBuffer, without copying.\n  } \n  const infoSize = readTail(binPack)\n  if (infoSize === 0) return\n\n  // check valid Meta\n  let metaInfo = parseMetaInfo(binPack, infoSize)\n  if (!metaInfo) return\n\n  if (!showDetail) {\n    return metaInfo\n  } else {\n    // add additional info\n    metaInfo.forEach(bufPack => {\n      const len = bufPack[3]\n      if (len == undefined) {  // add size info.\n        if (bufPack[1].includes('8')) bufPack[3] = 1\n        else if (bufPack[1].includes('16')) bufPack[3] = 2\n        else if (bufPack[1].includes('32')) bufPack[3] = 4\n        else if (bufPack[1].includes('F')) bufPack[3] = 4\n        else if (bufPack[1].includes('!')) bufPack[3] = 1\n      }\n      bufPack[4] = parseTypeName(bufPack[1])  // add full-type-name.\n    })\n    return metaInfo\n  }\n}\n\nexport function rawPack( ...args){\n  return getBuffer( pack(...args) )\n}\n\nexport function meta( ...args){\n  return getMeta( pack(...args) )\n}\n\nexport function metaDetail( ...args){\n  return getMeta( pack(...args) , true)\n}\n\n\n\nexport function getMetaDetail(binPack) {\n  return getMeta(binPack, true)\n}\n","import { hash as sha256, hmac } from '../lib/fast-sha256.js'\nimport { MBP } from 'meta-buffer-pack'\n\nsha256.hash = function (data) {\n  return sha256(MBP.U8(data))\n}\n\nsha256.hex = function (data) {\n  return MBP.hex(sha256.hash(data))\n}\n\nsha256.hmac = function (key, data) {\n  return hmac(MBP.U8(key), MBP.U8(data))\n}\n\nexport { sha256 }\n","import { sha256 } from './otpus-sha256.js'\nimport { MBP, Buffer } from 'meta-buffer-pack'\nimport base64js from 'base64-js'\nimport { webcrypto } from 'crypto'\n\nexport { sha256, base64js, MBP, Buffer }\nexport let webCrypto\n\nconst encoder = new TextEncoder()\nconst decoder = new TextDecoder()\n\nlet isNode = false\ntry {\n  isNode = Object.prototype.toString.call(global.process) === '[object process]'\n} catch (e) { }\n\nconst verbose = false\ntry {\n  if (isNode) {\n    console.log('# node.js env:')\n    webCrypto = webcrypto\n    if (verbose) webCryptoTest()\n  } else if (typeof importScripts === 'function') {\n    webCrypto = self.crypto\n    console.log('# Web Worker env')\n    if (verbose) webCryptoTest()\n  } else if (typeof document !== 'undefined') {\n    webCrypto = window.crypto\n    console.log('# browser env')\n    if (verbose) webCryptoTest()\n  }\n} catch (error) {\n  console.log('webCrypto err: ', error)\n}\n\nexport function webCryptoTest () {\n  if (typeof webCrypto.subtle !== 'object') {\n    console.log('No WebCrypto API supported.')\n  } else {\n    console.log('webCrypto test:')\n    const rand = webCrypto.getRandomValues(new Uint8Array(8))\n    console.log('1. getRandomValues: ', rand)\n\n    webCrypto.subtle.digest('SHA-256', rand).then(sum => {\n      const hash1 = MBP.hex(sum)\n      const hash2 = sha256.hex(rand)\n      console.log('A.Compare binary hash sums')\n      console.log('1. subtle.digest.sha256: ', hash1)\n      console.log('2. js.sha256: ', hash2)\n      if (hash1 === hash2) {\n        console.log('binary hash test: success.')\n      } else {\n        throw new Error('diffrent hash result')\n      }\n    })\n    const message = MBP.hex(rand)\n    webCrypto.subtle.digest('SHA-256', encoder.encode(message)).then(sum => {\n      const hash1 = MBP.hex(sum)\n      const hash2 = sha256.hex(message)\n      console.log('B.Compare string hash sums')\n      console.log('1. subtle.digest.sha256: ', hash1)\n      console.log('2. js.sha256: ', hash2)\n      if (hash1 === hash2) {\n        console.log('string hash test: success.')\n      } else {\n        throw new Error('diffrent hash result')\n      }\n    })\n  }\n}\n\nexport function getHashSpeed (n) {\n  const t1 = performance.now()\n  let buf = new Uint8Array(32)\n  for (let i = 0; i < n; i++) {\n    buf = sha256.hash(buf)\n  }\n  const ms = performance.now() - t1\n  return (n * 1000 / ms).toFixed(0)\n}\n\nexport function printHashPerformance (n) {\n  const nps = getHashSpeed(n)\n  let hashRate// = nps;\n  for (let aMultiples = ['K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y'], nMultiple = 0, nApprox = nps / 1024; nApprox > 1; nApprox /= 1024, nMultiple++) {\n    hashRate = nApprox.toFixed(3) + ' ' + aMultiples[nMultiple] + 'H/s ( ' + nps + ' hash/sec )'\n  }\n  return 'sha256 hash power: ' + hashRate\n}\n\n//  test.\nconst rand = webCrypto.getRandomValues(new Uint8Array(8))\nwebCrypto.subtle.digest('SHA-256', rand).then(sum => {\n  const hash1 = MBP.hex(sum)\n  const hash2 = sha256.hex(rand)\n  if (hash1 === hash2) {\n    // console.log('hash test: success. speed:' + printHashPerformance(10000))\n  } else {\n    throw new Error('diffrent hash result')\n  }\n})\n","import { sha256, base64js, MBP, Buffer, webCrypto, webCryptoTest, printHashPerformance, getHashSpeed } from './otpus-util.js'\nexport { sha256, base64js, MBP, Buffer, webCrypto, webCryptoTest, printHashPerformance }\n\nconst decoder = new TextDecoder()\n\nexport function RAND(size) {\n    return webCrypto.getRandomValues(Buffer.alloc(size))\n}\n\n\n/**\n * 8bits version. XOR encryption ( same with decryption)\n * 1. generate OTP from SHA\n * 2. XOR data and OTP\n *\n * @param {Uint8Array} data\n * @param {Uint8Array} otpKey32Bytes\n * @param {Number} otpStartIndex\n * @param {boolean} shareDataBuffer  true: modify origin data,  false: return new data.\n * @returns encryptedData\n */\nexport function xotp(data, otpKey32Bytes, otpStartIndex = 0, shareDataBuffer = false) {\n    if (!(otpKey32Bytes instanceof Uint8Array) || !(otpKey32Bytes.byteLength === 32)) {\n        throw new TypeError('xotp: Use 32 byteLength Uint8Array key.')\n    }\n\n    if (!(data instanceof Uint8Array)) {\n        throw new TypeError('xotp:  Use Uint8Array data. ')\n    }\n\n    if (typeof otpStartIndex !== 'number') {\n        throw new TypeError('otpStartIndex:  Use Number. 0 ~  2 ** 32 - 1')\n    }\n\n    if (typeof shareDataBuffer !== 'boolean') {\n        throw new TypeError('sharedDataBuffer: Use boolean. true or false.')\n    }\n\n    const otpKeyWithIndex = Buffer.concat( [ otpKey32Bytes, MBP.NB('32L', otpStartIndex) ] )\n\n    // data: copy or share\n    data = MBP.U8(data, shareDataBuffer) \n\n    let len = data.byteLength\n    let otpIndex = otpStartIndex\n    let dataOffset = 0\n    let xorCalcLen = 0\n\n    while( len > 0 ){\n        xorCalcLen = len < 32 ? len : 32\n        otpKeyWithIndex.writeUInt32LE(++otpIndex, 32 ) \n        let iotp = sha256.hash( otpKeyWithIndex  )\n        for(let i = 0; i < xorCalcLen ; i++){\n            data[ dataOffset++ ] ^= iotp[i]\n        }\n        len -= 32\n    }\n    return data\n}\n\n\n\n/**\n * text message encryption.\n *\n * @param {String} msg plainText\n * @param {String} key passPhrase\n * @param {Number} nPower keyAging factor for nTimesHash().  ex. when 10 => 2 ** 15 => repeat hash 32768 + 1 times.\n * @returns\n */\nexport function encryptMessage(msg, key, nPower = 15) {\n    if (typeof msg !== 'string') {\n        throw new TypeError('msg: Use string message.')\n    }\n    const msgBuffer = MBP.U8(msg)\n    const salt = RAND(32)\n    const saltStr = buf2hex(salt)\n    const mainKey = nTimesHash(saltStr + key, 2 ** nPower)\n    const randSize = parseInt(RAND(1)[0] / 4) // random number range  0~63\n    const randBuffer = RAND(randSize)\n\n    const randomSizeMessage = MBP.pack(\n        MBP.MB('#rand', randBuffer),\n        MBP.MB('msg', msgBuffer)\n    )\n\n    const hmac = sha256.hmac(mainKey, randomSizeMessage)\n    const encMsg = xotp(randomSizeMessage, mainKey)\n\n    const pack = MBP.pack(\n        MBP.MB('encMsg', encMsg),\n        MBP.MB('hmac', hmac),\n        MBP.MB('salt', salt),\n        MBP.MB('nPower', '8', nPower)\n    )\n\n    return pack.toString('base64')\n}\n\n// return string if success.\n// return undefined if fail.\nexport function decryptMessage(b64msg, key) {\n    const msgObj = MBP.unpack(Buffer.from(b64msg, 'base64'))\n\n    if (msgObj.nPower > 20) {\n        console.log('warning: too much nPower:' + msgObj.nPower)\n        return 'nPower too large'\n    }\n    const saltStr = buf2hex(msgObj.salt)\n    const mainKey = nTimesHash(saltStr + key, 2 ** msgObj.nPower)\n\n    const decMsg = xotp(msgObj.encMsg, mainKey, 0)\n    const hmac = sha256.hmac(mainKey, decMsg)\n\n    try {\n        const pack = MBP.unpack(decMsg)\n        if (typeof pack === 'object') {\n            if (!equal(hmac, msgObj.hmac)) return // 'Wrong HMAC: BROKEN'\n            const msg = decoder.decode(pack.msg)\n            return msg\n        }\n    } catch (error) {\n    }\n}\n\nexport function buf2hex(buffer) { return Array.prototype.map.call(new Uint8Array(buffer), x => ('00' + x.toString(16)).slice(-2)).join('') } // arraybuffer를 hex문자열로\n\nexport function equal(buf1, buf2) {\n    if (buf1.byteLength !== buf2.byteLength) return false\n    for (let i = 0; i < buf1.byteLength; i++) {\n        if (buf1[i] !== buf2[i]) return false\n    }\n    return true\n}\n\n/**\n * Simplified PBKDF2\n * @param {String | Uint8Array } srcData  *input: key + salt(rand) together. (support string.)\n * @param {Number} n how much repeat hash.  it will do n+1 times.\n * @returns hash32bytes : Uint8Array\n */\nexport function nTimesHash(srcData, n) {\n    let hashSum = sha256.hash(srcData)\n    for (let i = 0; i < n; i++) hashSum = sha256.hash(hashSum)\n    return hashSum\n}\n\nexport const HASH_POWER = getHashSpeed(10000)\n\nexport function hexlog(name, data) {\n    console.log(name, MBP.hex(data))\n}\n\n","import { RAND, MBP, webCrypto } from './otpus.js'\nconst wc = webCrypto.subtle\n\n/* otpus encryption lib.  Using WebCrypto API  */\n\n/**\n * General purpose encryption.\n * \n * features:\n * - support encryption for any type of data using string(or any types) passPhrase.\n * - decryption result data will be same data type of origin data.\n * - randomize data size. (to hide real message size)\n * \n * - encryption algorithm:  AES-GCM  of Webcrypto API.\n * - key generation:  PBKDF2 of WebCrypto API.\n * - salt, iv:  from getRandomValues\n * - data packaging:  MBP(meta-buffer-pack)  https://github.com/make-robot/meta-buffer-pack\n * \n * @param {String | Uint8Array | any } data \n * @param {String | Uint8Array | any} passPhrase \n * @param {Number} iterations default 10000. for PBKDF2\n * @returns {Promise} (will return bufferPack when fulfilled)  bufferPack is Buffer( subclass of Uint8Array)\n * \n */\nexport async function encrypt(data, passPhrase, iterations = 10000) {\n\n    const randSize = parseInt(RAND(1)[0] / 4);  // 0~63\n    const randBuffer = RAND(randSize)\n\n    // To hide real data size   ( special feature of otpus.)\n    // [ random size of buffer with random values + real data buffer ]\n    const randomSizeDataPack = MBP.pack(\n        MBP.MB('#randBuffer', randBuffer),\n        MBP.MB('realData', data)\n    )\n\n    const salt = RAND(16)  // at least 16Bytes  https://developer.mozilla.org/en-US/docs/Web/API/Pbkdf2Params\n    const iv = RAND(12) // recommended 12Bytes https://developer.mozilla.org/en-US/docs/Web/API/AesGcmParams\n    // otpus.RAND(size) is shortcut of getRandomValues( new Uint8Array(size) )\n\n\n    const rawKey = await wc.importKey(\n        \"raw\",\n        MBP.U8(passPhrase),\n        // MBP.U8() return Uint8Array for any data types.  ex. string -> return encoded(UTF8)     \n        { name: \"PBKDF2\" },\n        false,\n        [\"deriveKey\"]\n    );\n\n    const key = await wc.deriveKey(\n        {\n            \"name\": \"PBKDF2\",\n            salt: salt,\n            \"iterations\": iterations,\n            \"hash\": \"SHA-256\"\n        },\n        rawKey,\n        { \"name\": \"AES-GCM\", \"length\": 256 },\n        true,\n        [\"encrypt\", \"decrypt\"]\n    );\n\n    const encData = await wc.encrypt(\n        {\n            name: \"AES-GCM\",\n            iv: iv\n        },\n        key,\n        randomSizeDataPack\n    );\n\n    return MBP.pack(\n        MBP.MB('encData', encData),\n        MBP.MB('iv', iv),\n        MBP.MB('salt', salt),\n        MBP.MB('iterations', iterations)\n    )\n\n}\n\n\n\n/**\n * \n * @param {Uint8Array} encPack bufferPack (MBP pack) \n * @param {String | Uint8Array | any } passPhrase \n * @returns {Promise} will return decodedData when fulfilled\n * \n * [important] \n * return data type of decodedData is same with encryption data. (MBP pack feature. )\n   case 1. encrypt( data:String, key)      => pack =>  decrypt(pack, key) : Promise => String.\n   case 1. encrypt( data:Number, key)      => pack =>  decrypt(pack, key) : Promise => Number.\n   case 2. encrypt( data:Uint8Array, key)  => pack =>  decrypt(pack, key) : Promise => Uint8Array.\n */\nexport async function decrypt(encPack, passPhrase) {\n\n    const pack = MBP.unpack(encPack)\n    const rawKey = await wc.importKey(\n        \"raw\",\n        MBP.U8(passPhrase),\n        { name: \"PBKDF2\" },\n        false,\n        [\"deriveKey\"]\n    );\n\n    const key = await wc.deriveKey(\n        {\n            \"name\": \"PBKDF2\",\n            salt: pack.salt,\n            \"iterations\": pack.iterations,\n            \"hash\": \"SHA-256\"\n        },\n        rawKey,\n        { \"name\": \"AES-GCM\", \"length\": 256 },\n        true,\n        [\"encrypt\", \"decrypt\"]\n    );\n\n    const randomSizeDataPack = await wc.decrypt(\n        {\n            name: \"AES-GCM\",\n            iv: pack.iv\n        },\n        key,\n        pack.encData\n    );\n\n    const innerPack = MBP.unpack(randomSizeDataPack)\n    return innerPack.realData\n}\n\n"],"names":["K","Uint32Array","hashBlocks","w","v","p","pos","len","a","b","c","d","e","f","g","h","u","i","j","t1","t2","Hash","this","digestLength","blockSize","state","Int32Array","temp","buffer","Uint8Array","bufferLength","bytesHashed","finished","reset","prototype","clean","length","update","data","dataLength","Error","dataPos","finish","out","left","bitLenHi","bitLenLo","padLength","digest","_saveState","_restoreState","from","HMAC","key","inner","outer","pad","istate","ostate","hash","byteLength_1","b64","lens","getLens","validLen","placeHoldersLen","toByteArray_1","tmp","arr","Arr","_byteLength","curByte","revLookup","charCodeAt","fromByteArray_1","uint8","extraBytes","parts","maxChunkLength","len2","push","encodeChunk","lookup","join","Array","code","indexOf","start","end","num","output","offset","isLE","mLen","nBytes","m","eLen","eMax","eBias","nBits","s","NaN","Infinity","Math","pow","value","rt","abs","isNaN","floor","log","LN2","customInspectSymbol","Symbol","exports","Buffer","SlowBuffer","alloc","INSPECT_MAX_BYTES","K_MAX_LENGTH","createBuffer","RangeError","buf","Object","setPrototypeOf","arg","encodingOrOffset","TypeError","allocUnsafe","string","encoding","isEncoding","byteLength","actual","write","slice","fromString","ArrayBuffer","isView","arrayView","isInstance","copy","fromArrayBuffer","byteOffset","fromArrayLike","fromArrayView","SharedArrayBuffer","valueOf","obj","isBuffer","checked","undefined","numberIsNaN","type","isArray","fromObject","toPrimitive","assertSize","size","array","toString","mustMatch","arguments","loweredCase","utf8ToBytes","base64ToBytes","toLowerCase","slowToString","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","n","bidirectionalIndexOf","val","dir","arrayIndexOf","call","lastIndexOf","indexSize","arrLength","valLength","String","read","readUInt16BE","foundIndex","found","hexWrite","Number","remaining","strLen","parsed","parseInt","substr","utf8Write","blitBuffer","asciiWrite","str","byteArray","asciiToBytes","base64Write","ucs2Write","units","hi","lo","utf16leToBytes","base64","fromByteArray","min","res","firstByte","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","apply","decodeCodePointsArray","kMaxLength","TYPED_ARRAY_SUPPORT","proto","foo","typedArraySupport","console","error","defineProperty","enumerable","get","poolSize","fill","allocUnsafeSlow","_isBuffer","compare","x","y","concat","list","set","swap16","swap32","swap64","toLocaleString","equals","inspect","max","replace","trim","target","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","toJSON","_arr","ret","hexSliceLookupTable","bytes","checkOffset","ext","checkInt","wrtBigUInt64LE","checkIntBI","BigInt","wrtBigUInt64BE","checkIEEE754","writeFloat","littleEndian","noAssert","ieee754","writeDouble","newBuf","subarray","readUintLE","readUIntLE","mul","readUintBE","readUIntBE","readUint8","readUInt8","readUint16LE","readUInt16LE","readUint16BE","readUint32LE","readUInt32LE","readUint32BE","readUInt32BE","readBigUInt64LE","defineBigIntMethod","validateNumber","first","last","boundsError","readBigUInt64BE","readIntLE","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readBigInt64LE","readBigInt64BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUintLE","writeUIntLE","writeUintBE","writeUIntBE","writeUint8","writeUInt8","writeUint16LE","writeUInt16LE","writeUint16BE","writeUInt16BE","writeUint32LE","writeUInt32LE","writeUint32BE","writeUInt32BE","writeBigUInt64LE","writeBigUInt64BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeBigInt64LE","writeBigInt64BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","copyWithin","errors","E","sym","getMessage","Base","constructor","super","writable","configurable","name","stack","message","addNumericalSeparator","range","ERR_OUT_OF_RANGE","checkBounds","ERR_INVALID_ARG_TYPE","ERR_BUFFER_OUT_OF_BOUNDS","input","msg","received","isInteger","INVALID_BASE64_RE","leadSurrogate","toByteArray","split","base64clean","src","dst","alphabet","table","i16","fn","BufferBigIntNotDefined","encoder","TextEncoder","decoder","TextDecoder","NB","numberBuffer","initValue","toUpperCase","MB","metaBuffer","typeOrData","bufferType","JSON","stringify","MBA","metaBufferArguments","args","map","argsIndex","parseTypeName","readTypedBuffer","simpleType","strBuffer","decode","strNumber","objEncoded","parse","pack","bufArr","subArr","filter","item","flatSubArray","info","infoEncoded","infoSize","forEach","bufPack","infoStr","encode","infoSizeBuff","unpack","binPack","meta","infoArr","getMeta","binObj","readCounter","leftSize","mbaIndex","$","U8","parseUint8Array","shareArrayBuffer","originData","dataCopy","B8","parseBuffer","u8","B8pack","parseBufferThenConcat","dataArray","buffers","U8pack","parseUint8ThenConcat","bufferSize","hex","getBufferSize","getMetaSize","TAIL_LEN","parseMetaInfo","infoFrom","decoded","firstItem","readTail","DataView","getUint16","getBuffer","rawBufferSize","showDetail","metaInfo","buf1","buf2","sha256","MBP.U8","MBP.hex","hmac","webCrypto","isNode","global","process","webcrypto","importScripts","self","crypto","document","window","getHashSpeed","performance","now","toFixed","rand","getRandomValues","subtle","then","sum","RAND","xotp","otpKey32Bytes","otpStartIndex","shareDataBuffer","otpKeyWithIndex","MBP.NB","otpIndex","dataOffset","xorCalcLen","iotp","buf2hex","equal","nTimesHash","srcData","hashSum","HASH_POWER","wc","async","encPack","passPhrase","MBP.unpack","rawKey","importKey","deriveKey","salt","iterations","decrypt","iv","encData","realData","b64msg","msgObj","nPower","mainKey","decMsg","encMsg","randSize","randBuffer","randomSizeDataPack","MBP.pack","MBP.MB","encrypt","msgBuffer","randomSizeMessage","nps","hashRate","aMultiples","nMultiple","nApprox","hash1","hash2"],"mappings":"mCAmBA,MAAMA,EAAI,IAAIC,YAAY,CACxB,WAAY,WAAY,WAAY,WAAY,UAChD,WAAY,WAAY,WAAY,WAAY,UAChD,UAAY,WAAY,WAAY,WAAY,WAChD,WAAY,WAAY,WAAY,UAAY,UAChD,UAAY,WAAY,WAAY,WAAY,WAChD,WAAY,WAAY,WAAY,WAAY,WAChD,UAAY,UAAY,UAAY,UAAY,WAChD,WAAY,WAAY,WAAY,WAAY,WAChD,WAAY,WAAY,WAAY,WAAY,WAChD,WAAY,WAAY,UAAY,UAAY,UAChD,UAAY,UAAY,UAAY,WAAY,WAChD,WAAY,WAAY,WAAY,WAAY,WAChD,WAAY,WAAY,WAAY,aAEtC,SAASC,EAAYC,EAAGC,EAAGC,EAAGC,EAAKC,GACjC,IAAIC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,EAAIC,EACzC,KAAOb,GAAO,IAAI,CAShB,IARAC,EAAIJ,EAAE,GACNK,EAAIL,EAAE,GACNM,EAAIN,EAAE,GACNO,EAAIP,EAAE,GACNQ,EAAIR,EAAE,GACNS,EAAIT,EAAE,GACNU,EAAIV,EAAE,GACNW,EAAIX,EAAE,GACDa,EAAI,EAAGA,EAAI,GAAIA,IAClBC,EAAIZ,EAAU,EAAJW,EACVd,EAAEc,IAAe,IAAPZ,EAAEa,KAAc,IAAmB,IAAXb,EAAEa,EAAI,KAAc,IAC/B,IAAXb,EAAEa,EAAI,KAAc,EAAiB,IAAXb,EAAEa,EAAI,GAE9C,IAAKD,EAAI,GAAIA,EAAI,GAAIA,IACnBD,EAAIb,EAAEc,EAAI,GACVE,GAAMH,IAAM,GAAKA,GAAM,KAAaA,IAAM,GAAKA,GAAC,IAAkBA,IAAM,GACxEA,EAAIb,EAAEc,EAAI,IACVG,GAAMJ,IAAM,EAAIA,GAAM,KAAYA,IAAM,GAAKA,GAAC,IAAkBA,IAAM,EACtEb,EAAEc,IAAME,EAAKhB,EAAEc,EAAI,GAAK,IAAMG,EAAKjB,EAAEc,EAAI,IAAM,GAEjD,IAAKA,EAAI,EAAGA,EAAI,GAAIA,IAClBE,KAAUP,IAAM,EAAIA,GAAM,KAAYA,IAAM,GAAKA,GAAC,KACvCA,IAAM,GAAKA,QAAqBA,EAAIC,GAAOD,EAAIE,GAAO,IACrDC,GAAMf,EAAEiB,GAAKd,EAAEc,GAAM,GAAM,GAAM,EAC7CG,IAAQZ,IAAM,EAAIA,GAAC,KAAiBA,IAAM,GAAKA,GAAC,KACrCA,IAAM,GAAKA,GAAC,MAAoBA,EAAIC,EAAMD,EAAIE,EAAMD,EAAIC,GAAO,EAC1EK,EAAID,EACJA,EAAID,EACJA,EAAID,EACJA,EAAKD,EAAIQ,EAAM,EACfR,EAAID,EACJA,EAAID,EACJA,EAAID,EACJA,EAAKW,EAAKC,EAAM,EAElBhB,EAAE,IAAMI,EACRJ,EAAE,IAAMK,EACRL,EAAE,IAAMM,EACRN,EAAE,IAAMO,EACRP,EAAE,IAAMQ,EACRR,EAAE,IAAMS,EACRT,EAAE,IAAMU,EACRV,EAAE,IAAMW,EACRT,GAAO,GACPC,GAAO,EACR,CACD,OAAOD,CACT,CAEA,MAAMe,EAAsB,WAC1B,SAASA,IACPC,KAAKC,aAxEiB,GAyEtBD,KAAKE,UAxEc,GA0EnBF,KAAKG,MAAQ,IAAIC,WAAW,GAC5BJ,KAAKK,KAAO,IAAID,WAAW,IAC3BJ,KAAKM,OAAS,IAAIC,WAAW,KAC7BP,KAAKQ,aAAe,EACpBR,KAAKS,YAAc,EACnBT,KAAKU,UAAW,EAChBV,KAAKW,OACN,CAmHD,OAhHAZ,EAAKa,UAAUD,MAAQ,WAYrB,OAXAX,KAAKG,MAAM,GAAK,WAChBH,KAAKG,MAAM,GAAK,WAChBH,KAAKG,MAAM,GAAK,WAChBH,KAAKG,MAAM,GAAK,WAChBH,KAAKG,MAAM,GAAK,WAChBH,KAAKG,MAAM,GAAK,WAChBH,KAAKG,MAAM,GAAK,UAChBH,KAAKG,MAAM,GAAK,WAChBH,KAAKQ,aAAe,EACpBR,KAAKS,YAAc,EACnBT,KAAKU,UAAW,EACTV,IACR,EAEDD,EAAKa,UAAUC,MAAQ,WACrB,IAAK,IAAIlB,EAAI,EAAGA,EAAIK,KAAKM,OAAOQ,OAAQnB,IACtCK,KAAKM,OAAOX,GAAK,EAEnB,IAASA,EAAI,EAAGA,EAAIK,KAAKK,KAAKS,OAAQnB,IACpCK,KAAKK,KAAKV,GAAK,EAEjBK,KAAKW,OACN,EAQDZ,EAAKa,UAAUG,OAAS,SAAUC,EAAMC,GAEtC,QADmB,IAAfA,IAAyBA,EAAaD,EAAKF,QAC3Cd,KAAKU,SACP,MAAM,IAAIQ,MAAM,mDAElB,IAAIC,EAAU,EAEd,GADAnB,KAAKS,aAAeQ,EAChBjB,KAAKQ,aAAe,EAAG,CACzB,KAAOR,KAAKQ,aAAe,IAAMS,EAAa,GAC5CjB,KAAKM,OAAON,KAAKQ,gBAAkBQ,EAAKG,KACxCF,IAEwB,KAAtBjB,KAAKQ,eACP5B,EAAWoB,KAAKK,KAAML,KAAKG,MAAOH,KAAKM,OAAQ,EAAG,IAClDN,KAAKQ,aAAe,EAEvB,CAKD,IAJIS,GAAc,KAChBE,EAAUvC,EAAWoB,KAAKK,KAAML,KAAKG,MAAOa,EAAMG,EAASF,GAC3DA,GAAc,IAETA,EAAa,GAClBjB,KAAKM,OAAON,KAAKQ,gBAAkBQ,EAAKG,KACxCF,IAEF,OAAOjB,IACR,EAIDD,EAAKa,UAAUQ,OAAS,SAAUC,GAChC,IAAKrB,KAAKU,SAAU,CAClB,MAAMD,EAAcT,KAAKS,YACnBa,EAAOtB,KAAKQ,aACZe,EAAYd,EAAc,UAAc,EACxCe,EAAWf,GAAe,EAC1BgB,EAAahB,EAAc,GAAK,GAAM,GAAK,IACjDT,KAAKM,OAAOgB,GAAQ,IACpB,IAAK,IAAI3B,EAAI2B,EAAO,EAAG3B,EAAI8B,EAAY,EAAG9B,IACxCK,KAAKM,OAAOX,GAAK,EAEnBK,KAAKM,OAAOmB,EAAY,GAAMF,IAAa,GAAM,IACjDvB,KAAKM,OAAOmB,EAAY,GAAMF,IAAa,GAAM,IACjDvB,KAAKM,OAAOmB,EAAY,GAAMF,IAAa,EAAK,IAChDvB,KAAKM,OAAOmB,EAAY,GAAMF,IAAa,EAAK,IAChDvB,KAAKM,OAAOmB,EAAY,GAAMD,IAAa,GAAM,IACjDxB,KAAKM,OAAOmB,EAAY,GAAMD,IAAa,GAAM,IACjDxB,KAAKM,OAAOmB,EAAY,GAAMD,IAAa,EAAK,IAChDxB,KAAKM,OAAOmB,EAAY,GAAMD,IAAa,EAAK,IAChD5C,EAAWoB,KAAKK,KAAML,KAAKG,MAAOH,KAAKM,OAAQ,EAAGmB,GAClDzB,KAAKU,UAAW,CACjB,CACD,IAASf,EAAI,EAAGA,EAAI,EAAGA,IACrB0B,EAAQ,EAAJ1B,EAAQ,GAAMK,KAAKG,MAAMR,KAAO,GAAM,IAC1C0B,EAAQ,EAAJ1B,EAAQ,GAAMK,KAAKG,MAAMR,KAAO,GAAM,IAC1C0B,EAAQ,EAAJ1B,EAAQ,GAAMK,KAAKG,MAAMR,KAAO,EAAK,IACzC0B,EAAQ,EAAJ1B,EAAQ,GAAMK,KAAKG,MAAMR,KAAO,EAAK,IAE3C,OAAOK,IACR,EAEDD,EAAKa,UAAUc,OAAS,WACtB,MAAML,EAAM,IAAId,WAAWP,KAAKC,cAEhC,OADAD,KAAKoB,OAAOC,GACLA,CACR,EAEDtB,EAAKa,UAAUe,WAAa,SAAUN,GACpC,IAAK,IAAI1B,EAAI,EAAGA,EAAIK,KAAKG,MAAMW,OAAQnB,IACrC0B,EAAI1B,GAAKK,KAAKG,MAAMR,EAEvB,EAEDI,EAAKa,UAAUgB,cAAgB,SAAUC,EAAMpB,GAC7C,IAAK,IAAId,EAAI,EAAGA,EAAIK,KAAKG,MAAMW,OAAQnB,IACrCK,KAAKG,MAAMR,GAAKkC,EAAKlC,GAEvBK,KAAKS,YAAcA,EACnBT,KAAKU,UAAW,EAChBV,KAAKQ,aAAe,CACrB,EACMT,CACT,IAGM+B,EAAsB,WAC1B,SAASA,EAAMC,GACb/B,KAAKgC,MAAQ,IAAIjC,EACjBC,KAAKiC,MAAQ,IAAIlC,EACjBC,KAAKE,UAAYF,KAAKgC,MAAM9B,UAC5BF,KAAKC,aAAeD,KAAKgC,MAAM/B,aAC/B,MAAMiC,EAAM,IAAI3B,WAAWP,KAAKE,WAChC,GAAI6B,EAAIjB,OAASd,KAAKE,WACpB,IAAKH,GAAQgB,OAAOgB,GAAKX,OAAOc,GAAKrB,aAErC,IAAK,IAAIlB,EAAI,EAAGA,EAAIoC,EAAIjB,OAAQnB,IAC9BuC,EAAIvC,GAAKoC,EAAIpC,GAGjB,IAASA,EAAI,EAAGA,EAAIuC,EAAIpB,OAAQnB,IAC9BuC,EAAIvC,IAAM,GAEZK,KAAKgC,MAAMjB,OAAOmB,GAClB,IAASvC,EAAI,EAAGA,EAAIuC,EAAIpB,OAAQnB,IAC9BuC,EAAIvC,IAAM,IAEZK,KAAKiC,MAAMlB,OAAOmB,GAClBlC,KAAKmC,OAAS,IAAIxD,YAAY,GAC9BqB,KAAKoC,OAAS,IAAIzD,YAAY,GAC9BqB,KAAKgC,MAAML,WAAW3B,KAAKmC,QAC3BnC,KAAKiC,MAAMN,WAAW3B,KAAKoC,QAC3B,IAASzC,EAAI,EAAGA,EAAIuC,EAAIpB,OAAQnB,IAC9BuC,EAAIvC,GAAK,CAEZ,CAsCD,OAlCAmC,EAAKlB,UAAUD,MAAQ,WAGrB,OAFAX,KAAKgC,MAAMJ,cAAc5B,KAAKmC,OAAQnC,KAAKgC,MAAM9B,WACjDF,KAAKiC,MAAML,cAAc5B,KAAKoC,OAAQpC,KAAKiC,MAAM/B,WAC1CF,IACR,EAED8B,EAAKlB,UAAUC,MAAQ,WACrB,IAAK,IAAIlB,EAAI,EAAGA,EAAIK,KAAKmC,OAAOrB,OAAQnB,IACtCK,KAAKoC,OAAOzC,GAAKK,KAAKmC,OAAOxC,GAAK,EAEpCK,KAAKgC,MAAMnB,QACXb,KAAKiC,MAAMpB,OACZ,EAEDiB,EAAKlB,UAAUG,OAAS,SAAUC,GAEhC,OADAhB,KAAKgC,MAAMjB,OAAOC,GACXhB,IACR,EAED8B,EAAKlB,UAAUQ,OAAS,SAAUC,GAOhC,OANIrB,KAAKiC,MAAMvB,SACbV,KAAKiC,MAAMb,OAAOC,IAElBrB,KAAKgC,MAAMZ,OAAOC,GAClBrB,KAAKiC,MAAMlB,OAAOM,EAAKrB,KAAKC,cAAcmB,OAAOC,IAE5CrB,IACR,EAED8B,EAAKlB,UAAUc,OAAS,WACtB,MAAML,EAAM,IAAId,WAAWP,KAAKC,cAEhC,OADAD,KAAKoB,OAAOC,GACLA,CACR,EACMS,CACT,IAGO,SAASO,EAAMrB,GACpB,MAAMvB,GAAI,IAAKM,GAAQgB,OAAOC,GACxBU,EAASjC,EAAEiC,SAEjB,OADAjC,EAAEoB,QACKa,CACT,CC1RA,IATA,IAAAY,EAuCA,SAAqBC,GACnB,IAAIC,EAAOC,EAAQF,GACfG,EAAWF,EAAK,GAChBG,EAAkBH,EAAK,GAC3B,OAAuC,GAA9BE,EAAWC,GAAuB,EAAKA,CAClD,EA3CAC,EAiDA,SAAsBL,GACpB,IAAIM,EAcAlD,EAbA6C,EAAOC,EAAQF,GACfG,EAAWF,EAAK,GAChBG,EAAkBH,EAAK,GAEvBM,EAAM,IAAIC,EAVhB,SAAsBR,EAAKG,EAAUC,GACnC,OAAuC,GAA9BD,EAAWC,GAAuB,EAAKA,CAClD,CAQoBK,CAAYT,EAAKG,EAAUC,IAEzCM,EAAU,EAGVhE,EAAM0D,EAAkB,EACxBD,EAAW,EACXA,EAGJ,IAAK/C,EAAI,EAAGA,EAAIV,EAAKU,GAAK,EACxBkD,EACGK,EAAUX,EAAIY,WAAWxD,KAAO,GAChCuD,EAAUX,EAAIY,WAAWxD,EAAI,KAAO,GACpCuD,EAAUX,EAAIY,WAAWxD,EAAI,KAAO,EACrCuD,EAAUX,EAAIY,WAAWxD,EAAI,IAC/BmD,EAAIG,KAAcJ,GAAO,GAAM,IAC/BC,EAAIG,KAAcJ,GAAO,EAAK,IAC9BC,EAAIG,KAAmB,IAANJ,EAGK,IAApBF,IACFE,EACGK,EAAUX,EAAIY,WAAWxD,KAAO,EAChCuD,EAAUX,EAAIY,WAAWxD,EAAI,KAAO,EACvCmD,EAAIG,KAAmB,IAANJ,GAGK,IAApBF,IACFE,EACGK,EAAUX,EAAIY,WAAWxD,KAAO,GAChCuD,EAAUX,EAAIY,WAAWxD,EAAI,KAAO,EACpCuD,EAAUX,EAAIY,WAAWxD,EAAI,KAAO,EACvCmD,EAAIG,KAAcJ,GAAO,EAAK,IAC9BC,EAAIG,KAAmB,IAANJ,GAGnB,OAAOC,CACT,EA5FAM,EAkHA,SAAwBC,GAQtB,IAPA,IAAIR,EACA5D,EAAMoE,EAAMvC,OACZwC,EAAarE,EAAM,EACnBsE,EAAQ,GACRC,EAAiB,MAGZ7D,EAAI,EAAG8D,EAAOxE,EAAMqE,EAAY3D,EAAI8D,EAAM9D,GAAK6D,EACtDD,EAAMG,KAAKC,EAAYN,EAAO1D,EAAIA,EAAI6D,EAAkBC,EAAOA,EAAQ9D,EAAI6D,IAI1D,IAAfF,GACFT,EAAMQ,EAAMpE,EAAM,GAClBsE,EAAMG,KACJE,EAAOf,GAAO,GACde,EAAQf,GAAO,EAAK,IACpB,OAEsB,IAAfS,IACTT,GAAOQ,EAAMpE,EAAM,IAAM,GAAKoE,EAAMpE,EAAM,GAC1CsE,EAAMG,KACJE,EAAOf,GAAO,IACde,EAAQf,GAAO,EAAK,IACpBe,EAAQf,GAAO,EAAK,IACpB,MAIJ,OAAOU,EAAMM,KAAK,GACpB,EA/IID,EAAS,GACTV,EAAY,GACZH,EAA4B,oBAAfxC,WAA6BA,WAAauD,MAEvDC,EAAO,mEACFpE,EAAI,EAAsBA,EAAboE,KAAwBpE,EAC5CiE,EAAOjE,GAAKoE,EAAKpE,GACjBuD,EAAUa,EAAKZ,WAAWxD,IAAMA,EAQlC,SAAS8C,EAASF,GAChB,IAAItD,EAAMsD,EAAIzB,OAEd,GAAI7B,EAAM,EAAI,EACZ,MAAM,IAAIiC,MAAM,kDAKlB,IAAIwB,EAAWH,EAAIyB,QAAQ,KAO3B,OANkB,IAAdtB,IAAiBA,EAAWzD,GAMzB,CAACyD,EAJcA,IAAazD,EAC/B,EACA,EAAKyD,EAAW,EAGtB,CAmEA,SAASiB,EAAaN,EAAOY,EAAOC,GAGlC,IAFA,IAAIrB,EARoBsB,EASpBC,EAAS,GACJzE,EAAIsE,EAAOtE,EAAIuE,EAAKvE,GAAK,EAChCkD,GACIQ,EAAM1D,IAAM,GAAM,WAClB0D,EAAM1D,EAAI,IAAM,EAAK,QACP,IAAf0D,EAAM1D,EAAI,IACbyE,EAAOV,KAdFE,GADiBO,EAeMtB,IAdT,GAAK,IACxBe,EAAOO,GAAO,GAAK,IACnBP,EAAOO,GAAO,EAAI,IAClBP,EAAa,GAANO,IAaT,OAAOC,EAAOP,KAAK,GACrB,CAlGAX,EAAU,IAAIC,WAAW,IAAM,GAC/BD,EAAU,IAAIC,WAAW,IAAM,4DClBhB,SAAU7C,EAAQ+D,EAAQC,EAAMC,EAAMC,GACnD,IAAIlF,EAAGmF,EACHC,EAAiB,EAATF,EAAcD,EAAO,EAC7BI,GAAQ,GAAKD,GAAQ,EACrBE,EAAQD,GAAQ,EAChBE,GAAS,EACTlF,EAAI2E,EAAQE,EAAS,EAAK,EAC1BnF,EAAIiF,GAAQ,EAAI,EAChBQ,EAAIxE,EAAO+D,EAAS1E,GAOxB,IALAA,GAAKN,EAELC,EAAIwF,GAAM,IAAOD,GAAU,EAC3BC,KAAQD,EACRA,GAASH,EACFG,EAAQ,EAAGvF,EAAS,IAAJA,EAAWgB,EAAO+D,EAAS1E,GAAIA,GAAKN,EAAGwF,GAAS,GAKvE,IAHAJ,EAAInF,GAAM,IAAOuF,GAAU,EAC3BvF,KAAQuF,EACRA,GAASN,EACFM,EAAQ,EAAGJ,EAAS,IAAJA,EAAWnE,EAAO+D,EAAS1E,GAAIA,GAAKN,EAAGwF,GAAS,GAEvE,GAAU,IAANvF,EACFA,EAAI,EAAIsF,MACH,IAAItF,IAAMqF,EACf,OAAOF,EAAIM,IAAsBC,KAAdF,GAAK,EAAI,GAE5BL,GAAQQ,KAAKC,IAAI,EAAGX,GACpBjF,GAAQsF,CACT,CACD,OAAQE,GAAK,EAAI,GAAKL,EAAIQ,KAAKC,IAAI,EAAG5F,EAAIiF,EAC5C,IAEgB,SAAUjE,EAAQ6E,EAAOd,EAAQC,EAAMC,EAAMC,GAC3D,IAAIlF,EAAGmF,EAAGrF,EACNsF,EAAiB,EAATF,EAAcD,EAAO,EAC7BI,GAAQ,GAAKD,GAAQ,EACrBE,EAAQD,GAAQ,EAChBS,EAAe,KAATb,EAAcU,KAAKC,IAAI,GAAI,IAAMD,KAAKC,IAAI,GAAI,IAAM,EAC1DvF,EAAI2E,EAAO,EAAKE,EAAS,EACzBnF,EAAIiF,EAAO,GAAK,EAChBQ,EAAIK,EAAQ,GAAgB,IAAVA,GAAe,EAAIA,EAAQ,EAAK,EAAI,EAmC1D,IAjCAA,EAAQF,KAAKI,IAAIF,GAEbG,MAAMH,IAAUA,IAAUH,KAC5BP,EAAIa,MAAMH,GAAS,EAAI,EACvB7F,EAAIqF,IAEJrF,EAAI2F,KAAKM,MAAMN,KAAKO,IAAIL,GAASF,KAAKQ,KAClCN,GAAS/F,EAAI6F,KAAKC,IAAI,GAAI5F,IAAM,IAClCA,IACAF,GAAK,IAGL+F,GADE7F,EAAIsF,GAAS,EACNQ,EAAKhG,EAELgG,EAAKH,KAAKC,IAAI,EAAG,EAAIN,IAEpBxF,GAAK,IACfE,IACAF,GAAK,GAGHE,EAAIsF,GAASD,GACfF,EAAI,EACJnF,EAAIqF,GACKrF,EAAIsF,GAAS,GACtBH,GAAMU,EAAQ/F,EAAK,GAAK6F,KAAKC,IAAI,EAAGX,GACpCjF,GAAQsF,IAERH,EAAIU,EAAQF,KAAKC,IAAI,EAAGN,EAAQ,GAAKK,KAAKC,IAAI,EAAGX,GACjDjF,EAAI,IAIDiF,GAAQ,EAAGjE,EAAO+D,EAAS1E,GAAS,IAAJ8E,EAAU9E,GAAKN,EAAGoF,GAAK,IAAKF,GAAQ,GAI3E,IAFAjF,EAAKA,GAAKiF,EAAQE,EAClBC,GAAQH,EACDG,EAAO,EAAGpE,EAAO+D,EAAS1E,GAAS,IAAJL,EAAUK,GAAKN,EAAGC,GAAK,IAAKoF,GAAQ,GAE1EpE,EAAO+D,EAAS1E,EAAIN,IAAU,IAAJyF,CAC5B,qBCxEA,MAAMY,EACe,mBAAXC,QAAkD,mBAAlBA,OAAY,IAChDA,OAAY,IAAE,8BACd,KAENC,EAAAC,OAAiBA,EACjBD,EAAAE,WAyTA,SAAqBhF,GAInB,OAHKA,GAAUA,IACbA,EAAS,GAEJ+E,EAAOE,OAAOjF,EACvB,EA7TA8E,EAAAI,kBAA4B,GAE5B,MAAMC,EAAe,WAwDrB,SAASC,EAAcpF,GACrB,GAAIA,EAASmF,EACX,MAAM,IAAIE,WAAW,cAAgBrF,EAAS,kCAGhD,MAAMsF,EAAM,IAAI7F,WAAWO,GAE3B,OADAuF,OAAOC,eAAeF,EAAKP,EAAOjF,WAC3BwF,CACT,CAYA,SAASP,EAAQU,EAAKC,EAAkB1F,GAEtC,GAAmB,iBAARyF,EAAkB,CAC3B,GAAgC,iBAArBC,EACT,MAAM,IAAIC,UACR,sEAGJ,OAAOC,EAAYH,EACpB,CACD,OAAO1E,EAAK0E,EAAKC,EAAkB1F,EACrC,CAIA,SAASe,EAAMsD,EAAOqB,EAAkB1F,GACtC,GAAqB,iBAAVqE,EACT,OAqHJ,SAAqBwB,EAAQC,GAK3B,GAJwB,iBAAbA,GAAsC,KAAbA,IAClCA,EAAW,SAGRf,EAAOgB,WAAWD,GACrB,MAAM,IAAIH,UAAU,qBAAuBG,GAG7C,MAAM9F,EAAwC,EAA/BgG,EAAWH,EAAQC,GAClC,IAAIR,EAAMF,EAAapF,GAEvB,MAAMiG,EAASX,EAAIY,MAAML,EAAQC,GASjC,OAPIG,IAAWjG,IAIbsF,EAAMA,EAAIa,MAAM,EAAGF,IAGdX,CACT,CA3IWc,CAAW/B,EAAOqB,GAG3B,GAAIW,YAAYC,OAAOjC,GACrB,OAkJJ,SAAwBkC,GACtB,GAAIC,EAAWD,EAAW9G,YAAa,CACrC,MAAMgH,EAAO,IAAIhH,WAAW8G,GAC5B,OAAOG,EAAgBD,EAAKjH,OAAQiH,EAAKE,WAAYF,EAAKT,WAC3D,CACD,OAAOY,EAAcL,EACvB,CAxJWM,CAAcxC,GAGvB,GAAa,MAATA,EACF,MAAM,IAAIsB,UACR,yHACiDtB,GAIrD,GAAImC,EAAWnC,EAAOgC,cACjBhC,GAASmC,EAAWnC,EAAM7E,OAAQ6G,aACrC,OAAOK,EAAgBrC,EAAOqB,EAAkB1F,GAGlD,GAAiC,oBAAtB8G,oBACNN,EAAWnC,EAAOyC,oBAClBzC,GAASmC,EAAWnC,EAAM7E,OAAQsH,oBACrC,OAAOJ,EAAgBrC,EAAOqB,EAAkB1F,GAGlD,GAAqB,iBAAVqE,EACT,MAAM,IAAIsB,UACR,yEAIJ,MAAMoB,EAAU1C,EAAM0C,SAAW1C,EAAM0C,UACvC,GAAe,MAAXA,GAAmBA,IAAY1C,EACjC,OAAOU,EAAOhE,KAAKgG,EAASrB,EAAkB1F,GAGhD,MAAM3B,EAkJR,SAAqB2I,GACnB,GAAIjC,EAAOkC,SAASD,GAAM,CACxB,MAAM7I,EAA4B,EAAtB+I,EAAQF,EAAIhH,QAClBsF,EAAMF,EAAajH,GAEzB,OAAmB,IAAfmH,EAAItF,QAIRgH,EAAIP,KAAKnB,EAAK,EAAG,EAAGnH,GAHXmH,CAKV,CAED,YAAmB6B,IAAfH,EAAIhH,OACoB,iBAAfgH,EAAIhH,QAAuBoH,EAAYJ,EAAIhH,QAC7CoF,EAAa,GAEfwB,EAAcI,GAGN,WAAbA,EAAIK,MAAqBrE,MAAMsE,QAAQN,EAAI9G,MACtC0G,EAAcI,EAAI9G,WAD3B,CAGF,CAzKYqH,CAAWlD,GACrB,GAAIhG,EAAG,OAAOA,EAEd,GAAsB,oBAAXwG,QAAgD,MAAtBA,OAAO2C,aACH,mBAA9BnD,EAAMQ,OAAO2C,aACtB,OAAOzC,EAAOhE,KAAKsD,EAAMQ,OAAO2C,aAAa,UAAW9B,EAAkB1F,GAG5E,MAAM,IAAI2F,UACR,yHACiDtB,EAErD,CAmBA,SAASoD,EAAYC,GACnB,GAAoB,iBAATA,EACT,MAAM,IAAI/B,UAAU,0CACf,GAAI+B,EAAO,EAChB,MAAM,IAAIrC,WAAW,cAAgBqC,EAAO,iCAEhD,CA0BA,SAAS9B,EAAa8B,GAEpB,OADAD,EAAWC,GACJtC,EAAasC,EAAO,EAAI,EAAoB,EAAhBR,EAAQQ,GAC7C,CAuCA,SAASd,EAAee,GACtB,MAAM3H,EAAS2H,EAAM3H,OAAS,EAAI,EAA4B,EAAxBkH,EAAQS,EAAM3H,QAC9CsF,EAAMF,EAAapF,GACzB,IAAK,IAAInB,EAAI,EAAGA,EAAImB,EAAQnB,GAAK,EAC/ByG,EAAIzG,GAAgB,IAAX8I,EAAM9I,GAEjB,OAAOyG,CACT,CAUA,SAASoB,EAAiBiB,EAAOhB,EAAY3G,GAC3C,GAAI2G,EAAa,GAAKgB,EAAM3B,WAAaW,EACvC,MAAM,IAAItB,WAAW,wCAGvB,GAAIsC,EAAM3B,WAAaW,GAAc3G,GAAU,GAC7C,MAAM,IAAIqF,WAAW,wCAGvB,IAAIC,EAYJ,OAVEA,OADiB6B,IAAfR,QAAuCQ,IAAXnH,EACxB,IAAIP,WAAWkI,QACDR,IAAXnH,EACH,IAAIP,WAAWkI,EAAOhB,GAEtB,IAAIlH,WAAWkI,EAAOhB,EAAY3G,GAI1CuF,OAAOC,eAAeF,EAAKP,EAAOjF,WAE3BwF,CACT,CA2BA,SAAS4B,EAASlH,GAGhB,GAAIA,GAAUmF,EACZ,MAAM,IAAIE,WAAW,0DACaF,EAAayC,SAAS,IAAM,UAEhE,OAAgB,EAAT5H,CACT,CAsGA,SAASgG,EAAYH,EAAQC,GAC3B,GAAIf,EAAOkC,SAASpB,GAClB,OAAOA,EAAO7F,OAEhB,GAAIqG,YAAYC,OAAOT,IAAWW,EAAWX,EAAQQ,aACnD,OAAOR,EAAOG,WAEhB,GAAsB,iBAAXH,EACT,MAAM,IAAIF,UACR,kGAC0BE,GAI9B,MAAM1H,EAAM0H,EAAO7F,OACb6H,EAAaC,UAAU9H,OAAS,IAAsB,IAAjB8H,UAAU,GACrD,IAAKD,GAAqB,IAAR1J,EAAW,OAAO,EAGpC,IAAI4J,GAAc,EAClB,OACE,OAAQjC,GACN,IAAK,QACL,IAAK,SACL,IAAK,SACH,OAAO3H,EACT,IAAK,OACL,IAAK,QACH,OAAO6J,EAAYnC,GAAQ7F,OAC7B,IAAK,OACL,IAAK,QACL,IAAK,UACL,IAAK,WACH,OAAa,EAAN7B,EACT,IAAK,MACH,OAAOA,IAAQ,EACjB,IAAK,SACH,OAAO8J,EAAcpC,GAAQ7F,OAC/B,QACE,GAAI+H,EACF,OAAOF,GAAa,EAAIG,EAAYnC,GAAQ7F,OAE9C8F,GAAY,GAAKA,GAAUoC,cAC3BH,GAAc,EAGtB,CAGA,SAASI,EAAcrC,EAAU3C,EAAOC,GACtC,IAAI2E,GAAc,EAclB,SALcZ,IAAVhE,GAAuBA,EAAQ,KACjCA,EAAQ,GAINA,EAAQjE,KAAKc,OACf,MAAO,GAOT,SAJYmH,IAAR/D,GAAqBA,EAAMlE,KAAKc,UAClCoD,EAAMlE,KAAKc,QAGToD,GAAO,EACT,MAAO,GAOT,IAHAA,KAAS,KACTD,KAAW,GAGT,MAAO,GAKT,IAFK2C,IAAUA,EAAW,UAGxB,OAAQA,GACN,IAAK,MACH,OAAOsC,EAASlJ,KAAMiE,EAAOC,GAE/B,IAAK,OACL,IAAK,QACH,OAAOiF,EAAUnJ,KAAMiE,EAAOC,GAEhC,IAAK,QACH,OAAOkF,EAAWpJ,KAAMiE,EAAOC,GAEjC,IAAK,SACL,IAAK,SACH,OAAOmF,EAAYrJ,KAAMiE,EAAOC,GAElC,IAAK,SACH,OAAOoF,EAAYtJ,KAAMiE,EAAOC,GAElC,IAAK,OACL,IAAK,QACL,IAAK,UACL,IAAK,WACH,OAAOqF,EAAavJ,KAAMiE,EAAOC,GAEnC,QACE,GAAI2E,EAAa,MAAM,IAAIpC,UAAU,qBAAuBG,GAC5DA,GAAYA,EAAW,IAAIoC,cAC3BH,GAAc,EAGtB,CAUA,SAASW,EAAMrK,EAAGsK,EAAGhF,GACnB,MAAM9E,EAAIR,EAAEsK,GACZtK,EAAEsK,GAAKtK,EAAEsF,GACTtF,EAAEsF,GAAK9E,CACT,CA2IA,SAAS+J,EAAsBpJ,EAAQqJ,EAAKlC,EAAYb,EAAUgD,GAEhE,GAAsB,IAAlBtJ,EAAOQ,OAAc,OAAQ,EAmBjC,GAhB0B,iBAAf2G,GACTb,EAAWa,EACXA,EAAa,GACJA,EAAa,WACtBA,EAAa,WACJA,GAAc,aACvBA,GAAc,YAGZS,EADJT,GAAcA,KAGZA,EAAamC,EAAM,EAAKtJ,EAAOQ,OAAS,GAItC2G,EAAa,IAAGA,EAAanH,EAAOQ,OAAS2G,GAC7CA,GAAcnH,EAAOQ,OAAQ,CAC/B,GAAI8I,EAAK,OAAQ,EACZnC,EAAanH,EAAOQ,OAAS,CACtC,MAAS,GAAI2G,EAAa,EAAG,CACzB,IAAImC,EACC,OAAQ,EADJnC,EAAa,CAEvB,CAQD,GALmB,iBAARkC,IACTA,EAAM9D,EAAOhE,KAAK8H,EAAK/C,IAIrBf,EAAOkC,SAAS4B,GAElB,OAAmB,IAAfA,EAAI7I,QACE,EAEH+I,EAAavJ,EAAQqJ,EAAKlC,EAAYb,EAAUgD,GAClD,GAAmB,iBAARD,EAEhB,OADAA,GAAY,IACgC,mBAAjCpJ,WAAWK,UAAUoD,QAC1B4F,EACKrJ,WAAWK,UAAUoD,QAAQ8F,KAAKxJ,EAAQqJ,EAAKlC,GAE/ClH,WAAWK,UAAUmJ,YAAYD,KAAKxJ,EAAQqJ,EAAKlC,GAGvDoC,EAAavJ,EAAQ,CAACqJ,GAAMlC,EAAYb,EAAUgD,GAG3D,MAAM,IAAInD,UAAU,uCACtB,CAEA,SAASoD,EAAc/G,EAAK6G,EAAKlC,EAAYb,EAAUgD,GACrD,IA0BIjK,EA1BAqK,EAAY,EACZC,EAAYnH,EAAIhC,OAChBoJ,EAAYP,EAAI7I,OAEpB,QAAiBmH,IAAbrB,IAEe,UADjBA,EAAWuD,OAAOvD,GAAUoC,gBACY,UAAbpC,GACV,YAAbA,GAAuC,aAAbA,GAAyB,CACrD,GAAI9D,EAAIhC,OAAS,GAAK6I,EAAI7I,OAAS,EACjC,OAAQ,EAEVkJ,EAAY,EACZC,GAAa,EACbC,GAAa,EACbzC,GAAc,CACf,CAGH,SAAS2C,EAAMhE,EAAKzG,GAClB,OAAkB,IAAdqK,EACK5D,EAAIzG,GAEJyG,EAAIiE,aAAa1K,EAAIqK,EAE/B,CAGD,GAAIJ,EAAK,CACP,IAAIU,GAAc,EAClB,IAAK3K,EAAI8H,EAAY9H,EAAIsK,EAAWtK,IAClC,GAAIyK,EAAKtH,EAAKnD,KAAOyK,EAAKT,GAAqB,IAAhBW,EAAoB,EAAI3K,EAAI2K,IAEzD,IADoB,IAAhBA,IAAmBA,EAAa3K,GAChCA,EAAI2K,EAAa,IAAMJ,EAAW,OAAOI,EAAaN,OAEtC,IAAhBM,IAAmB3K,GAAKA,EAAI2K,GAChCA,GAAc,CAGtB,MAEI,IADI7C,EAAayC,EAAYD,IAAWxC,EAAawC,EAAYC,GAC5DvK,EAAI8H,EAAY9H,GAAK,EAAGA,IAAK,CAChC,IAAI4K,GAAQ,EACZ,IAAK,IAAI3K,EAAI,EAAGA,EAAIsK,EAAWtK,IAC7B,GAAIwK,EAAKtH,EAAKnD,EAAIC,KAAOwK,EAAKT,EAAK/J,GAAI,CACrC2K,GAAQ,EACR,KACD,CAEH,GAAIA,EAAO,OAAO5K,CACnB,CAGH,OAAQ,CACV,CAcA,SAAS6K,EAAUpE,EAAKO,EAAQtC,EAAQvD,GACtCuD,EAASoG,OAAOpG,IAAW,EAC3B,MAAMqG,EAAYtE,EAAItF,OAASuD,EAC1BvD,GAGHA,EAAS2J,OAAO3J,IACH4J,IACX5J,EAAS4J,GAJX5J,EAAS4J,EAQX,MAAMC,EAAShE,EAAO7F,OAKtB,IAAInB,EACJ,IAJImB,EAAS6J,EAAS,IACpB7J,EAAS6J,EAAS,GAGfhL,EAAI,EAAGA,EAAImB,IAAUnB,EAAG,CAC3B,MAAMiL,EAASC,SAASlE,EAAOmE,OAAW,EAAJnL,EAAO,GAAI,IACjD,GAAIuI,EAAY0C,GAAS,OAAOjL,EAChCyG,EAAI/B,EAAS1E,GAAKiL,CACnB,CACD,OAAOjL,CACT,CAEA,SAASoL,EAAW3E,EAAKO,EAAQtC,EAAQvD,GACvC,OAAOkK,EAAWlC,EAAYnC,EAAQP,EAAItF,OAASuD,GAAS+B,EAAK/B,EAAQvD,EAC3E,CAEA,SAASmK,EAAY7E,EAAKO,EAAQtC,EAAQvD,GACxC,OAAOkK,EAypCT,SAAuBE,GACrB,MAAMC,EAAY,GAClB,IAAK,IAAIxL,EAAI,EAAGA,EAAIuL,EAAIpK,SAAUnB,EAEhCwL,EAAUzH,KAAyB,IAApBwH,EAAI/H,WAAWxD,IAEhC,OAAOwL,CACT,CAhqCoBC,CAAazE,GAASP,EAAK/B,EAAQvD,EACvD,CAEA,SAASuK,EAAajF,EAAKO,EAAQtC,EAAQvD,GACzC,OAAOkK,EAAWjC,EAAcpC,GAASP,EAAK/B,EAAQvD,EACxD,CAEA,SAASwK,EAAWlF,EAAKO,EAAQtC,EAAQvD,GACvC,OAAOkK,EA0pCT,SAAyBE,EAAKK,GAC5B,IAAInM,EAAGoM,EAAIC,EACX,MAAMN,EAAY,GAClB,IAAK,IAAIxL,EAAI,EAAGA,EAAIuL,EAAIpK,WACjByK,GAAS,GAAK,KADa5L,EAGhCP,EAAI8L,EAAI/H,WAAWxD,GACnB6L,EAAKpM,GAAK,EACVqM,EAAKrM,EAAI,IACT+L,EAAUzH,KAAK+H,GACfN,EAAUzH,KAAK8H,GAGjB,OAAOL,CACT,CAxqCoBO,CAAe/E,EAAQP,EAAItF,OAASuD,GAAS+B,EAAK/B,EAAQvD,EAC9E,CA8EA,SAASwI,EAAalD,EAAKnC,EAAOC,GAChC,OAAc,IAAVD,GAAeC,IAAQkC,EAAItF,OACtB6K,EAAOC,cAAcxF,GAErBuF,EAAOC,cAAcxF,EAAIa,MAAMhD,EAAOC,GAEjD,CAEA,SAASiF,EAAW/C,EAAKnC,EAAOC,GAC9BA,EAAMe,KAAK4G,IAAIzF,EAAItF,OAAQoD,GAC3B,MAAM4H,EAAM,GAEZ,IAAInM,EAAIsE,EACR,KAAOtE,EAAIuE,GAAK,CACd,MAAM6H,EAAY3F,EAAIzG,GACtB,IAAIqM,EAAY,KACZC,EAAoBF,EAAY,IAChC,EACCA,EAAY,IACT,EACCA,EAAY,IACT,EACA,EAEZ,GAAIpM,EAAIsM,GAAoB/H,EAAK,CAC/B,IAAIgI,EAAYC,EAAWC,EAAYC,EAEvC,OAAQJ,GACN,KAAK,EACCF,EAAY,MACdC,EAAYD,GAEd,MACF,KAAK,EACHG,EAAa9F,EAAIzG,EAAI,GACO,MAAV,IAAbuM,KACHG,GAA6B,GAAZN,IAAqB,EAAoB,GAAbG,EACzCG,EAAgB,MAClBL,EAAYK,IAGhB,MACF,KAAK,EACHH,EAAa9F,EAAIzG,EAAI,GACrBwM,EAAY/F,EAAIzG,EAAI,GACQ,MAAV,IAAbuM,IAAsD,MAAV,IAAZC,KACnCE,GAA6B,GAAZN,IAAoB,IAAoB,GAAbG,IAAsB,EAAmB,GAAZC,EACrEE,EAAgB,OAAUA,EAAgB,OAAUA,EAAgB,SACtEL,EAAYK,IAGhB,MACF,KAAK,EACHH,EAAa9F,EAAIzG,EAAI,GACrBwM,EAAY/F,EAAIzG,EAAI,GACpByM,EAAahG,EAAIzG,EAAI,GACO,MAAV,IAAbuM,IAAsD,MAAV,IAAZC,IAAsD,MAAV,IAAbC,KAClEC,GAA6B,GAAZN,IAAoB,IAAqB,GAAbG,IAAsB,IAAmB,GAAZC,IAAqB,EAAoB,GAAbC,EAClGC,EAAgB,OAAUA,EAAgB,UAC5CL,EAAYK,IAIrB,CAEiB,OAAdL,GAGFA,EAAY,MACZC,EAAmB,GACVD,EAAY,QAErBA,GAAa,MACbF,EAAIpI,KAAKsI,IAAc,GAAK,KAAQ,OACpCA,EAAY,MAAqB,KAAZA,GAGvBF,EAAIpI,KAAKsI,GACTrM,GAAKsM,CACN,CAED,OAQF,SAAgCK,GAC9B,MAAMrN,EAAMqN,EAAWxL,OACvB,GAAI7B,GAAOsN,EACT,OAAOpC,OAAOqC,aAAaC,MAAMtC,OAAQmC,GAI3C,IAAIR,EAAM,GACNnM,EAAI,EACR,KAAOA,EAAIV,GACT6M,GAAO3B,OAAOqC,aAAaC,MACzBtC,OACAmC,EAAWrF,MAAMtH,EAAGA,GAAK4M,IAG7B,OAAOT,CACT,CAxBSY,CAAsBZ,EAC/B,CA3+BAlG,EAAA+G,WAAqB1G,EAgBrBJ,EAAO+G,oBAUP,WAEE,IACE,MAAM9J,EAAM,IAAIvC,WAAW,GACrBsM,EAAQ,CAAEC,IAAK,WAAc,OAAO,EAAE,GAG5C,OAFAzG,OAAOC,eAAeuG,EAAOtM,WAAWK,WACxCyF,OAAOC,eAAexD,EAAK+J,GACN,KAAd/J,EAAIgK,KACZ,CAAC,MAAOxN,GACP,OAAO,CACR,CACH,CArB6ByN,GAExBlH,EAAO+G,qBAA0C,oBAAZI,SACb,mBAAlBA,QAAQC,OACjBD,QAAQC,MACN,iJAkBJ5G,OAAO6G,eAAerH,EAAOjF,UAAW,SAAU,CAChDuM,YAAY,EACZC,IAAK,WACH,GAAKvH,EAAOkC,SAAS/H,MACrB,OAAOA,KAAKM,MACb,IAGH+F,OAAO6G,eAAerH,EAAOjF,UAAW,SAAU,CAChDuM,YAAY,EACZC,IAAK,WACH,GAAKvH,EAAOkC,SAAS/H,MACrB,OAAOA,KAAKyH,UACb,IAoCH5B,EAAOwH,SAAW,KA8DlBxH,EAAOhE,KAAO,SAAUsD,EAAOqB,EAAkB1F,GAC/C,OAAOe,EAAKsD,EAAOqB,EAAkB1F,EACvC,EAIAuF,OAAOC,eAAeT,EAAOjF,UAAWL,WAAWK,WACnDyF,OAAOC,eAAeT,EAAQtF,YA8B9BsF,EAAOE,MAAQ,SAAUyC,EAAM8E,EAAM1G,GACnC,OArBF,SAAgB4B,EAAM8E,EAAM1G,GAE1B,OADA2B,EAAWC,GACPA,GAAQ,EACHtC,EAAasC,QAETP,IAATqF,EAIyB,iBAAb1G,EACVV,EAAasC,GAAM8E,KAAKA,EAAM1G,GAC9BV,EAAasC,GAAM8E,KAAKA,GAEvBpH,EAAasC,EACtB,CAOSzC,CAAMyC,EAAM8E,EAAM1G,EAC3B,EAUAf,EAAOa,YAAc,SAAU8B,GAC7B,OAAO9B,EAAY8B,EACrB,EAIA3C,EAAO0H,gBAAkB,SAAU/E,GACjC,OAAO9B,EAAY8B,EACrB,EA6GA3C,EAAOkC,SAAW,SAAmB5I,GACnC,OAAY,MAALA,IAA6B,IAAhBA,EAAEqO,WACpBrO,IAAM0G,EAAOjF,SACjB,EAEAiF,EAAO4H,QAAU,SAAkBvO,EAAGC,GAGpC,GAFImI,EAAWpI,EAAGqB,cAAarB,EAAI2G,EAAOhE,KAAK3C,EAAGA,EAAEmF,OAAQnF,EAAE4H,aAC1DQ,EAAWnI,EAAGoB,cAAapB,EAAI0G,EAAOhE,KAAK1C,EAAGA,EAAEkF,OAAQlF,EAAE2H,cACzDjB,EAAOkC,SAAS7I,KAAO2G,EAAOkC,SAAS5I,GAC1C,MAAM,IAAIsH,UACR,yEAIJ,GAAIvH,IAAMC,EAAG,OAAO,EAEpB,IAAIuO,EAAIxO,EAAE4B,OACN6M,EAAIxO,EAAE2B,OAEV,IAAK,IAAInB,EAAI,EAAGV,EAAMgG,KAAK4G,IAAI6B,EAAGC,GAAIhO,EAAIV,IAAOU,EAC/C,GAAIT,EAAES,KAAOR,EAAEQ,GAAI,CACjB+N,EAAIxO,EAAES,GACNgO,EAAIxO,EAAEQ,GACN,KACD,CAGH,OAAI+N,EAAIC,GAAW,EACfA,EAAID,EAAU,EACX,CACT,EAEA7H,EAAOgB,WAAa,SAAqBD,GACvC,OAAQuD,OAAOvD,GAAUoC,eACvB,IAAK,MACL,IAAK,OACL,IAAK,QACL,IAAK,QACL,IAAK,SACL,IAAK,SACL,IAAK,SACL,IAAK,OACL,IAAK,QACL,IAAK,UACL,IAAK,WACH,OAAO,EACT,QACE,OAAO,EAEb,EAEAnD,EAAO+H,OAAS,SAAiBC,EAAM/M,GACrC,IAAKgD,MAAMsE,QAAQyF,GACjB,MAAM,IAAIpH,UAAU,+CAGtB,GAAoB,IAAhBoH,EAAK/M,OACP,OAAO+E,EAAOE,MAAM,GAGtB,IAAIpG,EACJ,QAAesI,IAAXnH,EAEF,IADAA,EAAS,EACJnB,EAAI,EAAGA,EAAIkO,EAAK/M,SAAUnB,EAC7BmB,GAAU+M,EAAKlO,GAAGmB,OAItB,MAAMR,EAASuF,EAAOa,YAAY5F,GAClC,IAAI9B,EAAM,EACV,IAAKW,EAAI,EAAGA,EAAIkO,EAAK/M,SAAUnB,EAAG,CAChC,IAAIyG,EAAMyH,EAAKlO,GACf,GAAI2H,EAAWlB,EAAK7F,YACdvB,EAAMoH,EAAItF,OAASR,EAAOQ,QACvB+E,EAAOkC,SAAS3B,KAAMA,EAAMP,EAAOhE,KAAKuE,IAC7CA,EAAImB,KAAKjH,EAAQtB,IAEjBuB,WAAWK,UAAUkN,IAAIhE,KACvBxJ,EACA8F,EACApH,OAGC,KAAK6G,EAAOkC,SAAS3B,GAC1B,MAAM,IAAIK,UAAU,+CAEpBL,EAAImB,KAAKjH,EAAQtB,EAClB,CACDA,GAAOoH,EAAItF,MACZ,CACD,OAAOR,CACT,EAiDAuF,EAAOiB,WAAaA,EA8EpBjB,EAAOjF,UAAU4M,WAAY,EAQ7B3H,EAAOjF,UAAUmN,OAAS,WACxB,MAAM9O,EAAMe,KAAKc,OACjB,GAAI7B,EAAM,GAAM,EACd,MAAM,IAAIkH,WAAW,6CAEvB,IAAK,IAAIxG,EAAI,EAAGA,EAAIV,EAAKU,GAAK,EAC5B6J,EAAKxJ,KAAML,EAAGA,EAAI,GAEpB,OAAOK,IACT,EAEA6F,EAAOjF,UAAUoN,OAAS,WACxB,MAAM/O,EAAMe,KAAKc,OACjB,GAAI7B,EAAM,GAAM,EACd,MAAM,IAAIkH,WAAW,6CAEvB,IAAK,IAAIxG,EAAI,EAAGA,EAAIV,EAAKU,GAAK,EAC5B6J,EAAKxJ,KAAML,EAAGA,EAAI,GAClB6J,EAAKxJ,KAAML,EAAI,EAAGA,EAAI,GAExB,OAAOK,IACT,EAEA6F,EAAOjF,UAAUqN,OAAS,WACxB,MAAMhP,EAAMe,KAAKc,OACjB,GAAI7B,EAAM,GAAM,EACd,MAAM,IAAIkH,WAAW,6CAEvB,IAAK,IAAIxG,EAAI,EAAGA,EAAIV,EAAKU,GAAK,EAC5B6J,EAAKxJ,KAAML,EAAGA,EAAI,GAClB6J,EAAKxJ,KAAML,EAAI,EAAGA,EAAI,GACtB6J,EAAKxJ,KAAML,EAAI,EAAGA,EAAI,GACtB6J,EAAKxJ,KAAML,EAAI,EAAGA,EAAI,GAExB,OAAOK,IACT,EAEA6F,EAAOjF,UAAU8H,SAAW,WAC1B,MAAM5H,EAASd,KAAKc,OACpB,OAAe,IAAXA,EAAqB,GACA,IAArB8H,UAAU9H,OAAqBqI,EAAUnJ,KAAM,EAAGc,GAC/CmI,EAAawD,MAAMzM,KAAM4I,UAClC,EAEA/C,EAAOjF,UAAUsN,eAAiBrI,EAAOjF,UAAU8H,SAEnD7C,EAAOjF,UAAUuN,OAAS,SAAiBhP,GACzC,IAAK0G,EAAOkC,SAAS5I,GAAI,MAAM,IAAIsH,UAAU,6BAC7C,OAAIzG,OAASb,GACsB,IAA5B0G,EAAO4H,QAAQzN,KAAMb,EAC9B,EAEA0G,EAAOjF,UAAUwN,QAAU,WACzB,IAAIlD,EAAM,GACV,MAAMmD,EAAMzI,EAAQI,kBAGpB,OAFAkF,EAAMlL,KAAK0I,SAAS,MAAO,EAAG2F,GAAKC,QAAQ,UAAW,OAAOC,OACzDvO,KAAKc,OAASuN,IAAKnD,GAAO,SACvB,WAAaA,EAAM,GAC5B,EACIxF,IACFG,EAAOjF,UAAU8E,GAAuBG,EAAOjF,UAAUwN,SAG3DvI,EAAOjF,UAAU6M,QAAU,SAAkBe,EAAQvK,EAAOC,EAAKuK,EAAWC,GAI1E,GAHIpH,EAAWkH,EAAQjO,cACrBiO,EAAS3I,EAAOhE,KAAK2M,EAAQA,EAAOnK,OAAQmK,EAAO1H,cAEhDjB,EAAOkC,SAASyG,GACnB,MAAM,IAAI/H,UACR,wFAC2B+H,GAiB/B,QAbcvG,IAAVhE,IACFA,EAAQ,QAEEgE,IAAR/D,IACFA,EAAMsK,EAASA,EAAO1N,OAAS,QAEfmH,IAAdwG,IACFA,EAAY,QAEExG,IAAZyG,IACFA,EAAU1O,KAAKc,QAGbmD,EAAQ,GAAKC,EAAMsK,EAAO1N,QAAU2N,EAAY,GAAKC,EAAU1O,KAAKc,OACtE,MAAM,IAAIqF,WAAW,sBAGvB,GAAIsI,GAAaC,GAAWzK,GAASC,EACnC,OAAO,EAET,GAAIuK,GAAaC,EACf,OAAQ,EAEV,GAAIzK,GAASC,EACX,OAAO,EAQT,GAAIlE,OAASwO,EAAQ,OAAO,EAE5B,IAAId,GAJJgB,KAAa,IADbD,KAAe,GAMXd,GAPJzJ,KAAS,IADTD,KAAW,GASX,MAAMhF,EAAMgG,KAAK4G,IAAI6B,EAAGC,GAElBgB,EAAW3O,KAAKiH,MAAMwH,EAAWC,GACjCE,EAAaJ,EAAOvH,MAAMhD,EAAOC,GAEvC,IAAK,IAAIvE,EAAI,EAAGA,EAAIV,IAAOU,EACzB,GAAIgP,EAAShP,KAAOiP,EAAWjP,GAAI,CACjC+N,EAAIiB,EAAShP,GACbgO,EAAIiB,EAAWjP,GACf,KACD,CAGH,OAAI+N,EAAIC,GAAW,EACfA,EAAID,EAAU,EACX,CACT,EA2HA7H,EAAOjF,UAAUiO,SAAW,SAAmBlF,EAAKlC,EAAYb,GAC9D,OAAoD,IAA7C5G,KAAKgE,QAAQ2F,EAAKlC,EAAYb,EACvC,EAEAf,EAAOjF,UAAUoD,QAAU,SAAkB2F,EAAKlC,EAAYb,GAC5D,OAAO8C,EAAqB1J,KAAM2J,EAAKlC,EAAYb,GAAU,EAC/D,EAEAf,EAAOjF,UAAUmJ,YAAc,SAAsBJ,EAAKlC,EAAYb,GACpE,OAAO8C,EAAqB1J,KAAM2J,EAAKlC,EAAYb,GAAU,EAC/D,EA4CAf,EAAOjF,UAAUoG,MAAQ,SAAgBL,EAAQtC,EAAQvD,EAAQ8F,GAE/D,QAAeqB,IAAX5D,EACFuC,EAAW,OACX9F,EAASd,KAAKc,OACduD,EAAS,OAEJ,QAAe4D,IAAXnH,GAA0C,iBAAXuD,EACxCuC,EAAWvC,EACXvD,EAASd,KAAKc,OACduD,EAAS,MAEJ,KAAIyK,SAASzK,GAUlB,MAAM,IAAInD,MACR,2EAVFmD,KAAoB,EAChByK,SAAShO,IACXA,KAAoB,OACHmH,IAAbrB,IAAwBA,EAAW,UAEvCA,EAAW9F,EACXA,OAASmH,EAMZ,CAED,MAAMyC,EAAY1K,KAAKc,OAASuD,EAGhC,SAFe4D,IAAXnH,GAAwBA,EAAS4J,KAAW5J,EAAS4J,GAEpD/D,EAAO7F,OAAS,IAAMA,EAAS,GAAKuD,EAAS,IAAOA,EAASrE,KAAKc,OACrE,MAAM,IAAIqF,WAAW,0CAGlBS,IAAUA,EAAW,QAE1B,IAAIiC,GAAc,EAClB,OACE,OAAQjC,GACN,IAAK,MACH,OAAO4D,EAASxK,KAAM2G,EAAQtC,EAAQvD,GAExC,IAAK,OACL,IAAK,QACH,OAAOiK,EAAU/K,KAAM2G,EAAQtC,EAAQvD,GAEzC,IAAK,QACL,IAAK,SACL,IAAK,SACH,OAAOmK,EAAWjL,KAAM2G,EAAQtC,EAAQvD,GAE1C,IAAK,SAEH,OAAOuK,EAAYrL,KAAM2G,EAAQtC,EAAQvD,GAE3C,IAAK,OACL,IAAK,QACL,IAAK,UACL,IAAK,WACH,OAAOwK,EAAUtL,KAAM2G,EAAQtC,EAAQvD,GAEzC,QACE,GAAI+H,EAAa,MAAM,IAAIpC,UAAU,qBAAuBG,GAC5DA,GAAY,GAAKA,GAAUoC,cAC3BH,GAAc,EAGtB,EAEAhD,EAAOjF,UAAUmO,OAAS,WACxB,MAAO,CACL5G,KAAM,SACNnH,KAAM8C,MAAMlD,UAAUqG,MAAM6C,KAAK9J,KAAKgP,MAAQhP,KAAM,GAExD,EAyFA,MAAMuM,EAAuB,KAoB7B,SAASnD,EAAYhD,EAAKnC,EAAOC,GAC/B,IAAI+K,EAAM,GACV/K,EAAMe,KAAK4G,IAAIzF,EAAItF,OAAQoD,GAE3B,IAAK,IAAIvE,EAAIsE,EAAOtE,EAAIuE,IAAOvE,EAC7BsP,GAAO9E,OAAOqC,aAAsB,IAATpG,EAAIzG,IAEjC,OAAOsP,CACT,CAEA,SAAS5F,EAAajD,EAAKnC,EAAOC,GAChC,IAAI+K,EAAM,GACV/K,EAAMe,KAAK4G,IAAIzF,EAAItF,OAAQoD,GAE3B,IAAK,IAAIvE,EAAIsE,EAAOtE,EAAIuE,IAAOvE,EAC7BsP,GAAO9E,OAAOqC,aAAapG,EAAIzG,IAEjC,OAAOsP,CACT,CAEA,SAAS/F,EAAU9C,EAAKnC,EAAOC,GAC7B,MAAMjF,EAAMmH,EAAItF,SAEXmD,GAASA,EAAQ,KAAGA,EAAQ,KAC5BC,GAAOA,EAAM,GAAKA,EAAMjF,KAAKiF,EAAMjF,GAExC,IAAIoC,EAAM,GACV,IAAK,IAAI1B,EAAIsE,EAAOtE,EAAIuE,IAAOvE,EAC7B0B,GAAO6N,EAAoB9I,EAAIzG,IAEjC,OAAO0B,CACT,CAEA,SAASkI,EAAcnD,EAAKnC,EAAOC,GACjC,MAAMiL,EAAQ/I,EAAIa,MAAMhD,EAAOC,GAC/B,IAAI4H,EAAM,GAEV,IAAK,IAAInM,EAAI,EAAGA,EAAIwP,EAAMrO,OAAS,EAAGnB,GAAK,EACzCmM,GAAO3B,OAAOqC,aAAa2C,EAAMxP,GAAqB,IAAfwP,EAAMxP,EAAI,IAEnD,OAAOmM,CACT,CAiCA,SAASsD,EAAa/K,EAAQgL,EAAKvO,GACjC,GAAKuD,EAAS,GAAO,GAAKA,EAAS,EAAG,MAAM,IAAI8B,WAAW,sBAC3D,GAAI9B,EAASgL,EAAMvO,EAAQ,MAAM,IAAIqF,WAAW,wCAClD,CAyQA,SAASmJ,EAAUlJ,EAAKjB,EAAOd,EAAQgL,EAAKhB,EAAKxC,GAC/C,IAAKhG,EAAOkC,SAAS3B,GAAM,MAAM,IAAIK,UAAU,+CAC/C,GAAItB,EAAQkJ,GAAOlJ,EAAQ0G,EAAK,MAAM,IAAI1F,WAAW,qCACrD,GAAI9B,EAASgL,EAAMjJ,EAAItF,OAAQ,MAAM,IAAIqF,WAAW,qBACtD,CA+FA,SAASoJ,EAAgBnJ,EAAKjB,EAAOd,EAAQwH,EAAKwC,GAChDmB,EAAWrK,EAAO0G,EAAKwC,EAAKjI,EAAK/B,EAAQ,GAEzC,IAAIoH,EAAKhB,OAAOtF,EAAQsK,OAAO,aAC/BrJ,EAAI/B,KAAYoH,EAChBA,IAAW,EACXrF,EAAI/B,KAAYoH,EAChBA,IAAW,EACXrF,EAAI/B,KAAYoH,EAChBA,IAAW,EACXrF,EAAI/B,KAAYoH,EAChB,IAAID,EAAKf,OAAOtF,GAASsK,OAAO,IAAMA,OAAO,aAQ7C,OAPArJ,EAAI/B,KAAYmH,EAChBA,IAAW,EACXpF,EAAI/B,KAAYmH,EAChBA,IAAW,EACXpF,EAAI/B,KAAYmH,EAChBA,IAAW,EACXpF,EAAI/B,KAAYmH,EACTnH,CACT,CAEA,SAASqL,EAAgBtJ,EAAKjB,EAAOd,EAAQwH,EAAKwC,GAChDmB,EAAWrK,EAAO0G,EAAKwC,EAAKjI,EAAK/B,EAAQ,GAEzC,IAAIoH,EAAKhB,OAAOtF,EAAQsK,OAAO,aAC/BrJ,EAAI/B,EAAS,GAAKoH,EAClBA,IAAW,EACXrF,EAAI/B,EAAS,GAAKoH,EAClBA,IAAW,EACXrF,EAAI/B,EAAS,GAAKoH,EAClBA,IAAW,EACXrF,EAAI/B,EAAS,GAAKoH,EAClB,IAAID,EAAKf,OAAOtF,GAASsK,OAAO,IAAMA,OAAO,aAQ7C,OAPArJ,EAAI/B,EAAS,GAAKmH,EAClBA,IAAW,EACXpF,EAAI/B,EAAS,GAAKmH,EAClBA,IAAW,EACXpF,EAAI/B,EAAS,GAAKmH,EAClBA,IAAW,EACXpF,EAAI/B,GAAUmH,EACPnH,EAAS,CAClB,CAkHA,SAASsL,EAAcvJ,EAAKjB,EAAOd,EAAQgL,EAAKhB,EAAKxC,GACnD,GAAIxH,EAASgL,EAAMjJ,EAAItF,OAAQ,MAAM,IAAIqF,WAAW,sBACpD,GAAI9B,EAAS,EAAG,MAAM,IAAI8B,WAAW,qBACvC,CAEA,SAASyJ,EAAYxJ,EAAKjB,EAAOd,EAAQwL,EAAcC,GAOrD,OANA3K,GAASA,EACTd,KAAoB,EACfyL,GACHH,EAAavJ,EAAKjB,EAAOd,EAAQ,GAEnC0L,EAAc3J,EAAKjB,EAAOd,EAAQwL,EAAc,GAAI,GAC7CxL,EAAS,CAClB,CAUA,SAAS2L,EAAa5J,EAAKjB,EAAOd,EAAQwL,EAAcC,GAOtD,OANA3K,GAASA,EACTd,KAAoB,EACfyL,GACHH,EAAavJ,EAAKjB,EAAOd,EAAQ,GAEnC0L,EAAc3J,EAAKjB,EAAOd,EAAQwL,EAAc,GAAI,GAC7CxL,EAAS,CAClB,CAzkBAwB,EAAOjF,UAAUqG,MAAQ,SAAgBhD,EAAOC,GAC9C,MAAMjF,EAAMe,KAAKc,QACjBmD,IAAUA,GAGE,GACVA,GAAShF,GACG,IAAGgF,EAAQ,GACdA,EAAQhF,IACjBgF,EAAQhF,IANViF,OAAc+D,IAAR/D,EAAoBjF,IAAQiF,GASxB,GACRA,GAAOjF,GACG,IAAGiF,EAAM,GACVA,EAAMjF,IACfiF,EAAMjF,GAGJiF,EAAMD,IAAOC,EAAMD,GAEvB,MAAMgM,EAASjQ,KAAKkQ,SAASjM,EAAOC,GAIpC,OAFAmC,OAAOC,eAAe2J,EAAQpK,EAAOjF,WAE9BqP,CACT,EAUApK,EAAOjF,UAAUuP,WACjBtK,EAAOjF,UAAUwP,WAAa,SAAqB/L,EAAQyC,EAAYgJ,GACrEzL,KAAoB,EACpByC,KAA4B,EACvBgJ,GAAUV,EAAY/K,EAAQyC,EAAY9G,KAAKc,QAEpD,IAAI6I,EAAM3J,KAAKqE,GACXgM,EAAM,EACN1Q,EAAI,EACR,OAASA,EAAImH,IAAeuJ,GAAO,MACjC1G,GAAO3J,KAAKqE,EAAS1E,GAAK0Q,EAG5B,OAAO1G,CACT,EAEA9D,EAAOjF,UAAU0P,WACjBzK,EAAOjF,UAAU2P,WAAa,SAAqBlM,EAAQyC,EAAYgJ,GACrEzL,KAAoB,EACpByC,KAA4B,EACvBgJ,GACHV,EAAY/K,EAAQyC,EAAY9G,KAAKc,QAGvC,IAAI6I,EAAM3J,KAAKqE,IAAWyC,GACtBuJ,EAAM,EACV,KAAOvJ,EAAa,IAAMuJ,GAAO,MAC/B1G,GAAO3J,KAAKqE,IAAWyC,GAAcuJ,EAGvC,OAAO1G,CACT,EAEA9D,EAAOjF,UAAU4P,UACjB3K,EAAOjF,UAAU6P,UAAY,SAAoBpM,EAAQyL,GAGvD,OAFAzL,KAAoB,EACfyL,GAAUV,EAAY/K,EAAQ,EAAGrE,KAAKc,QACpCd,KAAKqE,EACd,EAEAwB,EAAOjF,UAAU8P,aACjB7K,EAAOjF,UAAU+P,aAAe,SAAuBtM,EAAQyL,GAG7D,OAFAzL,KAAoB,EACfyL,GAAUV,EAAY/K,EAAQ,EAAGrE,KAAKc,QACpCd,KAAKqE,GAAWrE,KAAKqE,EAAS,IAAM,CAC7C,EAEAwB,EAAOjF,UAAUgQ,aACjB/K,EAAOjF,UAAUyJ,aAAe,SAAuBhG,EAAQyL,GAG7D,OAFAzL,KAAoB,EACfyL,GAAUV,EAAY/K,EAAQ,EAAGrE,KAAKc,QACnCd,KAAKqE,IAAW,EAAKrE,KAAKqE,EAAS,EAC7C,EAEAwB,EAAOjF,UAAUiQ,aACjBhL,EAAOjF,UAAUkQ,aAAe,SAAuBzM,EAAQyL,GAI7D,OAHAzL,KAAoB,EACfyL,GAAUV,EAAY/K,EAAQ,EAAGrE,KAAKc,SAElCd,KAAKqE,GACTrE,KAAKqE,EAAS,IAAM,EACpBrE,KAAKqE,EAAS,IAAM,IACD,SAAnBrE,KAAKqE,EAAS,EACrB,EAEAwB,EAAOjF,UAAUmQ,aACjBlL,EAAOjF,UAAUoQ,aAAe,SAAuB3M,EAAQyL,GAI7D,OAHAzL,KAAoB,EACfyL,GAAUV,EAAY/K,EAAQ,EAAGrE,KAAKc,QAEpB,SAAfd,KAAKqE,IACTrE,KAAKqE,EAAS,IAAM,GACrBrE,KAAKqE,EAAS,IAAM,EACrBrE,KAAKqE,EAAS,GAClB,EAEAwB,EAAOjF,UAAUqQ,gBAAkBC,GAAmB,SAA0B7M,GAE9E8M,EADA9M,KAAoB,EACG,UACvB,MAAM+M,EAAQpR,KAAKqE,GACbgN,EAAOrR,KAAKqE,EAAS,QACb4D,IAAVmJ,QAAgCnJ,IAAToJ,GACzBC,EAAYjN,EAAQrE,KAAKc,OAAS,GAGpC,MAAM2K,EAAK2F,EACQ,IAAjBpR,OAAOqE,GACU,MAAjBrE,OAAOqE,GACPrE,OAAOqE,GAAU,GAAK,GAElBmH,EAAKxL,OAAOqE,GACC,IAAjBrE,OAAOqE,GACU,MAAjBrE,OAAOqE,GACPgN,EAAO,GAAK,GAEd,OAAO5B,OAAOhE,IAAOgE,OAAOjE,IAAOiE,OAAO,IAC5C,IAEA5J,EAAOjF,UAAU2Q,gBAAkBL,GAAmB,SAA0B7M,GAE9E8M,EADA9M,KAAoB,EACG,UACvB,MAAM+M,EAAQpR,KAAKqE,GACbgN,EAAOrR,KAAKqE,EAAS,QACb4D,IAAVmJ,QAAgCnJ,IAAToJ,GACzBC,EAAYjN,EAAQrE,KAAKc,OAAS,GAGpC,MAAM0K,EAAK4F,EAAQ,GAAK,GACL,MAAjBpR,OAAOqE,GACU,IAAjBrE,OAAOqE,GACPrE,OAAOqE,GAEHoH,EAAKzL,OAAOqE,GAAU,GAAK,GACd,MAAjBrE,OAAOqE,GACU,IAAjBrE,OAAOqE,GACPgN,EAEF,OAAQ5B,OAAOjE,IAAOiE,OAAO,KAAOA,OAAOhE,EAC7C,IAEA5F,EAAOjF,UAAU4Q,UAAY,SAAoBnN,EAAQyC,EAAYgJ,GACnEzL,KAAoB,EACpByC,KAA4B,EACvBgJ,GAAUV,EAAY/K,EAAQyC,EAAY9G,KAAKc,QAEpD,IAAI6I,EAAM3J,KAAKqE,GACXgM,EAAM,EACN1Q,EAAI,EACR,OAASA,EAAImH,IAAeuJ,GAAO,MACjC1G,GAAO3J,KAAKqE,EAAS1E,GAAK0Q,EAM5B,OAJAA,GAAO,IAEH1G,GAAO0G,IAAK1G,GAAO1E,KAAKC,IAAI,EAAG,EAAI4B,IAEhC6C,CACT,EAEA9D,EAAOjF,UAAU6Q,UAAY,SAAoBpN,EAAQyC,EAAYgJ,GACnEzL,KAAoB,EACpByC,KAA4B,EACvBgJ,GAAUV,EAAY/K,EAAQyC,EAAY9G,KAAKc,QAEpD,IAAInB,EAAImH,EACJuJ,EAAM,EACN1G,EAAM3J,KAAKqE,IAAW1E,GAC1B,KAAOA,EAAI,IAAM0Q,GAAO,MACtB1G,GAAO3J,KAAKqE,IAAW1E,GAAK0Q,EAM9B,OAJAA,GAAO,IAEH1G,GAAO0G,IAAK1G,GAAO1E,KAAKC,IAAI,EAAG,EAAI4B,IAEhC6C,CACT,EAEA9D,EAAOjF,UAAU8Q,SAAW,SAAmBrN,EAAQyL,GAGrD,OAFAzL,KAAoB,EACfyL,GAAUV,EAAY/K,EAAQ,EAAGrE,KAAKc,QACtB,IAAfd,KAAKqE,IAC0B,GAA5B,IAAOrE,KAAKqE,GAAU,GADKrE,KAAKqE,EAE3C,EAEAwB,EAAOjF,UAAU+Q,YAAc,SAAsBtN,EAAQyL,GAC3DzL,KAAoB,EACfyL,GAAUV,EAAY/K,EAAQ,EAAGrE,KAAKc,QAC3C,MAAM6I,EAAM3J,KAAKqE,GAAWrE,KAAKqE,EAAS,IAAM,EAChD,OAAc,MAANsF,EAAsB,WAANA,EAAmBA,CAC7C,EAEA9D,EAAOjF,UAAUgR,YAAc,SAAsBvN,EAAQyL,GAC3DzL,KAAoB,EACfyL,GAAUV,EAAY/K,EAAQ,EAAGrE,KAAKc,QAC3C,MAAM6I,EAAM3J,KAAKqE,EAAS,GAAMrE,KAAKqE,IAAW,EAChD,OAAc,MAANsF,EAAsB,WAANA,EAAmBA,CAC7C,EAEA9D,EAAOjF,UAAUiR,YAAc,SAAsBxN,EAAQyL,GAI3D,OAHAzL,KAAoB,EACfyL,GAAUV,EAAY/K,EAAQ,EAAGrE,KAAKc,QAEnCd,KAAKqE,GACVrE,KAAKqE,EAAS,IAAM,EACpBrE,KAAKqE,EAAS,IAAM,GACpBrE,KAAKqE,EAAS,IAAM,EACzB,EAEAwB,EAAOjF,UAAUkR,YAAc,SAAsBzN,EAAQyL,GAI3D,OAHAzL,KAAoB,EACfyL,GAAUV,EAAY/K,EAAQ,EAAGrE,KAAKc,QAEnCd,KAAKqE,IAAW,GACrBrE,KAAKqE,EAAS,IAAM,GACpBrE,KAAKqE,EAAS,IAAM,EACpBrE,KAAKqE,EAAS,EACnB,EAEAwB,EAAOjF,UAAUmR,eAAiBb,GAAmB,SAAyB7M,GAE5E8M,EADA9M,KAAoB,EACG,UACvB,MAAM+M,EAAQpR,KAAKqE,GACbgN,EAAOrR,KAAKqE,EAAS,QACb4D,IAAVmJ,QAAgCnJ,IAAToJ,GACzBC,EAAYjN,EAAQrE,KAAKc,OAAS,GAGpC,MAAM6I,EAAM3J,KAAKqE,EAAS,GACL,IAAnBrE,KAAKqE,EAAS,GACK,MAAnBrE,KAAKqE,EAAS,IACbgN,GAAQ,IAEX,OAAQ5B,OAAO9F,IAAQ8F,OAAO,KAC5BA,OAAO2B,EACU,IAAjBpR,OAAOqE,GACU,MAAjBrE,OAAOqE,GACPrE,OAAOqE,GAAU,GAAK,GAC1B,IAEAwB,EAAOjF,UAAUoR,eAAiBd,GAAmB,SAAyB7M,GAE5E8M,EADA9M,KAAoB,EACG,UACvB,MAAM+M,EAAQpR,KAAKqE,GACbgN,EAAOrR,KAAKqE,EAAS,QACb4D,IAAVmJ,QAAgCnJ,IAAToJ,GACzBC,EAAYjN,EAAQrE,KAAKc,OAAS,GAGpC,MAAM6I,GAAOyH,GAAS,IACH,MAAjBpR,OAAOqE,GACU,IAAjBrE,OAAOqE,GACPrE,OAAOqE,GAET,OAAQoL,OAAO9F,IAAQ8F,OAAO,KAC5BA,OAAOzP,OAAOqE,GAAU,GAAK,GACZ,MAAjBrE,OAAOqE,GACU,IAAjBrE,OAAOqE,GACPgN,EACJ,IAEAxL,EAAOjF,UAAUqR,YAAc,SAAsB5N,EAAQyL,GAG3D,OAFAzL,KAAoB,EACfyL,GAAUV,EAAY/K,EAAQ,EAAGrE,KAAKc,QACpCiP,EAAa/P,KAAMqE,GAAQ,EAAM,GAAI,EAC9C,EAEAwB,EAAOjF,UAAUsR,YAAc,SAAsB7N,EAAQyL,GAG3D,OAFAzL,KAAoB,EACfyL,GAAUV,EAAY/K,EAAQ,EAAGrE,KAAKc,QACpCiP,EAAa/P,KAAMqE,GAAQ,EAAO,GAAI,EAC/C,EAEAwB,EAAOjF,UAAUuR,aAAe,SAAuB9N,EAAQyL,GAG7D,OAFAzL,KAAoB,EACfyL,GAAUV,EAAY/K,EAAQ,EAAGrE,KAAKc,QACpCiP,EAAa/P,KAAMqE,GAAQ,EAAM,GAAI,EAC9C,EAEAwB,EAAOjF,UAAUwR,aAAe,SAAuB/N,EAAQyL,GAG7D,OAFAzL,KAAoB,EACfyL,GAAUV,EAAY/K,EAAQ,EAAGrE,KAAKc,QACpCiP,EAAa/P,KAAMqE,GAAQ,EAAO,GAAI,EAC/C,EAQAwB,EAAOjF,UAAUyR,YACjBxM,EAAOjF,UAAU0R,YAAc,SAAsBnN,EAAOd,EAAQyC,EAAYgJ,GAC9E3K,GAASA,EACTd,KAAoB,EACpByC,KAA4B,EACvBgJ,GAEHR,EAAStP,KAAMmF,EAAOd,EAAQyC,EADb7B,KAAKC,IAAI,EAAG,EAAI4B,GAAc,EACK,GAGtD,IAAIuJ,EAAM,EACN1Q,EAAI,EAER,IADAK,KAAKqE,GAAkB,IAARc,IACNxF,EAAImH,IAAeuJ,GAAO,MACjCrQ,KAAKqE,EAAS1E,GAAMwF,EAAQkL,EAAO,IAGrC,OAAOhM,EAASyC,CAClB,EAEAjB,EAAOjF,UAAU2R,YACjB1M,EAAOjF,UAAU4R,YAAc,SAAsBrN,EAAOd,EAAQyC,EAAYgJ,GAC9E3K,GAASA,EACTd,KAAoB,EACpByC,KAA4B,EACvBgJ,GAEHR,EAAStP,KAAMmF,EAAOd,EAAQyC,EADb7B,KAAKC,IAAI,EAAG,EAAI4B,GAAc,EACK,GAGtD,IAAInH,EAAImH,EAAa,EACjBuJ,EAAM,EAEV,IADArQ,KAAKqE,EAAS1E,GAAa,IAARwF,IACVxF,GAAK,IAAM0Q,GAAO,MACzBrQ,KAAKqE,EAAS1E,GAAMwF,EAAQkL,EAAO,IAGrC,OAAOhM,EAASyC,CAClB,EAEAjB,EAAOjF,UAAU6R,WACjB5M,EAAOjF,UAAU8R,WAAa,SAAqBvN,EAAOd,EAAQyL,GAKhE,OAJA3K,GAASA,EACTd,KAAoB,EACfyL,GAAUR,EAAStP,KAAMmF,EAAOd,EAAQ,EAAG,IAAM,GACtDrE,KAAKqE,GAAmB,IAARc,EACTd,EAAS,CAClB,EAEAwB,EAAOjF,UAAU+R,cACjB9M,EAAOjF,UAAUgS,cAAgB,SAAwBzN,EAAOd,EAAQyL,GAMtE,OALA3K,GAASA,EACTd,KAAoB,EACfyL,GAAUR,EAAStP,KAAMmF,EAAOd,EAAQ,EAAG,MAAQ,GACxDrE,KAAKqE,GAAmB,IAARc,EAChBnF,KAAKqE,EAAS,GAAMc,IAAU,EACvBd,EAAS,CAClB,EAEAwB,EAAOjF,UAAUiS,cACjBhN,EAAOjF,UAAUkS,cAAgB,SAAwB3N,EAAOd,EAAQyL,GAMtE,OALA3K,GAASA,EACTd,KAAoB,EACfyL,GAAUR,EAAStP,KAAMmF,EAAOd,EAAQ,EAAG,MAAQ,GACxDrE,KAAKqE,GAAWc,IAAU,EAC1BnF,KAAKqE,EAAS,GAAc,IAARc,EACbd,EAAS,CAClB,EAEAwB,EAAOjF,UAAUmS,cACjBlN,EAAOjF,UAAUoS,cAAgB,SAAwB7N,EAAOd,EAAQyL,GAQtE,OAPA3K,GAASA,EACTd,KAAoB,EACfyL,GAAUR,EAAStP,KAAMmF,EAAOd,EAAQ,EAAG,WAAY,GAC5DrE,KAAKqE,EAAS,GAAMc,IAAU,GAC9BnF,KAAKqE,EAAS,GAAMc,IAAU,GAC9BnF,KAAKqE,EAAS,GAAMc,IAAU,EAC9BnF,KAAKqE,GAAmB,IAARc,EACTd,EAAS,CAClB,EAEAwB,EAAOjF,UAAUqS,cACjBpN,EAAOjF,UAAUsS,cAAgB,SAAwB/N,EAAOd,EAAQyL,GAQtE,OAPA3K,GAASA,EACTd,KAAoB,EACfyL,GAAUR,EAAStP,KAAMmF,EAAOd,EAAQ,EAAG,WAAY,GAC5DrE,KAAKqE,GAAWc,IAAU,GAC1BnF,KAAKqE,EAAS,GAAMc,IAAU,GAC9BnF,KAAKqE,EAAS,GAAMc,IAAU,EAC9BnF,KAAKqE,EAAS,GAAc,IAARc,EACbd,EAAS,CAClB,EA8CAwB,EAAOjF,UAAUuS,iBAAmBjC,GAAmB,SAA2B/L,EAAOd,EAAS,GAChG,OAAOkL,EAAevP,KAAMmF,EAAOd,EAAQoL,OAAO,GAAIA,OAAO,sBAC/D,IAEA5J,EAAOjF,UAAUwS,iBAAmBlC,GAAmB,SAA2B/L,EAAOd,EAAS,GAChG,OAAOqL,EAAe1P,KAAMmF,EAAOd,EAAQoL,OAAO,GAAIA,OAAO,sBAC/D,IAEA5J,EAAOjF,UAAUyS,WAAa,SAAqBlO,EAAOd,EAAQyC,EAAYgJ,GAG5E,GAFA3K,GAASA,EACTd,KAAoB,GACfyL,EAAU,CACb,MAAMwD,EAAQrO,KAAKC,IAAI,EAAI,EAAI4B,EAAc,GAE7CwI,EAAStP,KAAMmF,EAAOd,EAAQyC,EAAYwM,EAAQ,GAAIA,EACvD,CAED,IAAI3T,EAAI,EACJ0Q,EAAM,EACNkD,EAAM,EAEV,IADAvT,KAAKqE,GAAkB,IAARc,IACNxF,EAAImH,IAAeuJ,GAAO,MAC7BlL,EAAQ,GAAa,IAARoO,GAAsC,IAAzBvT,KAAKqE,EAAS1E,EAAI,KAC9C4T,EAAM,GAERvT,KAAKqE,EAAS1E,IAAOwF,EAAQkL,GAAQ,GAAKkD,EAAM,IAGlD,OAAOlP,EAASyC,CAClB,EAEAjB,EAAOjF,UAAU4S,WAAa,SAAqBrO,EAAOd,EAAQyC,EAAYgJ,GAG5E,GAFA3K,GAASA,EACTd,KAAoB,GACfyL,EAAU,CACb,MAAMwD,EAAQrO,KAAKC,IAAI,EAAI,EAAI4B,EAAc,GAE7CwI,EAAStP,KAAMmF,EAAOd,EAAQyC,EAAYwM,EAAQ,GAAIA,EACvD,CAED,IAAI3T,EAAImH,EAAa,EACjBuJ,EAAM,EACNkD,EAAM,EAEV,IADAvT,KAAKqE,EAAS1E,GAAa,IAARwF,IACVxF,GAAK,IAAM0Q,GAAO,MACrBlL,EAAQ,GAAa,IAARoO,GAAsC,IAAzBvT,KAAKqE,EAAS1E,EAAI,KAC9C4T,EAAM,GAERvT,KAAKqE,EAAS1E,IAAOwF,EAAQkL,GAAQ,GAAKkD,EAAM,IAGlD,OAAOlP,EAASyC,CAClB,EAEAjB,EAAOjF,UAAU6S,UAAY,SAAoBtO,EAAOd,EAAQyL,GAM9D,OALA3K,GAASA,EACTd,KAAoB,EACfyL,GAAUR,EAAStP,KAAMmF,EAAOd,EAAQ,EAAG,KAAO,KACnDc,EAAQ,IAAGA,EAAQ,IAAOA,EAAQ,GACtCnF,KAAKqE,GAAmB,IAARc,EACTd,EAAS,CAClB,EAEAwB,EAAOjF,UAAU8S,aAAe,SAAuBvO,EAAOd,EAAQyL,GAMpE,OALA3K,GAASA,EACTd,KAAoB,EACfyL,GAAUR,EAAStP,KAAMmF,EAAOd,EAAQ,EAAG,OAAS,OACzDrE,KAAKqE,GAAmB,IAARc,EAChBnF,KAAKqE,EAAS,GAAMc,IAAU,EACvBd,EAAS,CAClB,EAEAwB,EAAOjF,UAAU+S,aAAe,SAAuBxO,EAAOd,EAAQyL,GAMpE,OALA3K,GAASA,EACTd,KAAoB,EACfyL,GAAUR,EAAStP,KAAMmF,EAAOd,EAAQ,EAAG,OAAS,OACzDrE,KAAKqE,GAAWc,IAAU,EAC1BnF,KAAKqE,EAAS,GAAc,IAARc,EACbd,EAAS,CAClB,EAEAwB,EAAOjF,UAAUgT,aAAe,SAAuBzO,EAAOd,EAAQyL,GAQpE,OAPA3K,GAASA,EACTd,KAAoB,EACfyL,GAAUR,EAAStP,KAAMmF,EAAOd,EAAQ,EAAG,YAAa,YAC7DrE,KAAKqE,GAAmB,IAARc,EAChBnF,KAAKqE,EAAS,GAAMc,IAAU,EAC9BnF,KAAKqE,EAAS,GAAMc,IAAU,GAC9BnF,KAAKqE,EAAS,GAAMc,IAAU,GACvBd,EAAS,CAClB,EAEAwB,EAAOjF,UAAUiT,aAAe,SAAuB1O,EAAOd,EAAQyL,GASpE,OARA3K,GAASA,EACTd,KAAoB,EACfyL,GAAUR,EAAStP,KAAMmF,EAAOd,EAAQ,EAAG,YAAa,YACzDc,EAAQ,IAAGA,EAAQ,WAAaA,EAAQ,GAC5CnF,KAAKqE,GAAWc,IAAU,GAC1BnF,KAAKqE,EAAS,GAAMc,IAAU,GAC9BnF,KAAKqE,EAAS,GAAMc,IAAU,EAC9BnF,KAAKqE,EAAS,GAAc,IAARc,EACbd,EAAS,CAClB,EAEAwB,EAAOjF,UAAUkT,gBAAkB5C,GAAmB,SAA0B/L,EAAOd,EAAS,GAC9F,OAAOkL,EAAevP,KAAMmF,EAAOd,GAASoL,OAAO,sBAAuBA,OAAO,sBACnF,IAEA5J,EAAOjF,UAAUmT,gBAAkB7C,GAAmB,SAA0B/L,EAAOd,EAAS,GAC9F,OAAOqL,EAAe1P,KAAMmF,EAAOd,GAASoL,OAAO,sBAAuBA,OAAO,sBACnF,IAiBA5J,EAAOjF,UAAUoT,aAAe,SAAuB7O,EAAOd,EAAQyL,GACpE,OAAOF,EAAW5P,KAAMmF,EAAOd,GAAQ,EAAMyL,EAC/C,EAEAjK,EAAOjF,UAAUqT,aAAe,SAAuB9O,EAAOd,EAAQyL,GACpE,OAAOF,EAAW5P,KAAMmF,EAAOd,GAAQ,EAAOyL,EAChD,EAYAjK,EAAOjF,UAAUsT,cAAgB,SAAwB/O,EAAOd,EAAQyL,GACtE,OAAOE,EAAYhQ,KAAMmF,EAAOd,GAAQ,EAAMyL,EAChD,EAEAjK,EAAOjF,UAAUuT,cAAgB,SAAwBhP,EAAOd,EAAQyL,GACtE,OAAOE,EAAYhQ,KAAMmF,EAAOd,GAAQ,EAAOyL,EACjD,EAGAjK,EAAOjF,UAAU2G,KAAO,SAAeiH,EAAQ4F,EAAanQ,EAAOC,GACjE,IAAK2B,EAAOkC,SAASyG,GAAS,MAAM,IAAI/H,UAAU,+BAQlD,GAPKxC,IAAOA,EAAQ,GACfC,GAAe,IAARA,IAAWA,EAAMlE,KAAKc,QAC9BsT,GAAe5F,EAAO1N,SAAQsT,EAAc5F,EAAO1N,QAClDsT,IAAaA,EAAc,GAC5BlQ,EAAM,GAAKA,EAAMD,IAAOC,EAAMD,GAG9BC,IAAQD,EAAO,OAAO,EAC1B,GAAsB,IAAlBuK,EAAO1N,QAAgC,IAAhBd,KAAKc,OAAc,OAAO,EAGrD,GAAIsT,EAAc,EAChB,MAAM,IAAIjO,WAAW,6BAEvB,GAAIlC,EAAQ,GAAKA,GAASjE,KAAKc,OAAQ,MAAM,IAAIqF,WAAW,sBAC5D,GAAIjC,EAAM,EAAG,MAAM,IAAIiC,WAAW,2BAG9BjC,EAAMlE,KAAKc,SAAQoD,EAAMlE,KAAKc,QAC9B0N,EAAO1N,OAASsT,EAAclQ,EAAMD,IACtCC,EAAMsK,EAAO1N,OAASsT,EAAcnQ,GAGtC,MAAMhF,EAAMiF,EAAMD,EAalB,OAXIjE,OAASwO,GAAqD,mBAApCjO,WAAWK,UAAUyT,WAEjDrU,KAAKqU,WAAWD,EAAanQ,EAAOC,GAEpC3D,WAAWK,UAAUkN,IAAIhE,KACvB0E,EACAxO,KAAKkQ,SAASjM,EAAOC,GACrBkQ,GAIGnV,CACT,EAMA4G,EAAOjF,UAAU0M,KAAO,SAAe3D,EAAK1F,EAAOC,EAAK0C,GAEtD,GAAmB,iBAAR+C,EAAkB,CAS3B,GARqB,iBAAV1F,GACT2C,EAAW3C,EACXA,EAAQ,EACRC,EAAMlE,KAAKc,QACa,iBAARoD,IAChB0C,EAAW1C,EACXA,EAAMlE,KAAKc,aAEImH,IAAbrB,GAA8C,iBAAbA,EACnC,MAAM,IAAIH,UAAU,6BAEtB,GAAwB,iBAAbG,IAA0Bf,EAAOgB,WAAWD,GACrD,MAAM,IAAIH,UAAU,qBAAuBG,GAE7C,GAAmB,IAAf+C,EAAI7I,OAAc,CACpB,MAAMiD,EAAO4F,EAAIxG,WAAW,IACV,SAAbyD,GAAuB7C,EAAO,KAClB,WAAb6C,KAEF+C,EAAM5F,EAET,CACL,KAA4B,iBAAR4F,EAChBA,GAAY,IACY,kBAARA,IAChBA,EAAMc,OAAOd,IAIf,GAAI1F,EAAQ,GAAKjE,KAAKc,OAASmD,GAASjE,KAAKc,OAASoD,EACpD,MAAM,IAAIiC,WAAW,sBAGvB,GAAIjC,GAAOD,EACT,OAAOjE,KAQT,IAAIL,EACJ,GANAsE,KAAkB,EAClBC,OAAc+D,IAAR/D,EAAoBlE,KAAKc,OAASoD,IAAQ,EAE3CyF,IAAKA,EAAM,GAGG,iBAARA,EACT,IAAKhK,EAAIsE,EAAOtE,EAAIuE,IAAOvE,EACzBK,KAAKL,GAAKgK,MAEP,CACL,MAAMwF,EAAQtJ,EAAOkC,SAAS4B,GAC1BA,EACA9D,EAAOhE,KAAK8H,EAAK/C,GACf3H,EAAMkQ,EAAMrO,OAClB,GAAY,IAAR7B,EACF,MAAM,IAAIwH,UAAU,cAAgBkD,EAClC,qCAEJ,IAAKhK,EAAI,EAAGA,EAAIuE,EAAMD,IAAStE,EAC7BK,KAAKL,EAAIsE,GAASkL,EAAMxP,EAAIV,EAE/B,CAED,OAAOe,IACT,EAMA,MAAMsU,EAAS,CAAE,EACjB,SAASC,EAAGC,EAAKC,EAAYC,GAC3BJ,EAAOE,GAAO,cAAwBE,EACpC,WAAAC,GACEC,QAEAvO,OAAO6G,eAAelN,KAAM,UAAW,CACrCmF,MAAOsP,EAAWhI,MAAMzM,KAAM4I,WAC9BiM,UAAU,EACVC,cAAc,IAIhB9U,KAAK+U,KAAO,GAAG/U,KAAK+U,SAASP,KAG7BxU,KAAKgV,aAEEhV,KAAK+U,IACb,CAED,QAAIhR,GACF,OAAOyQ,CACR,CAED,QAAIzQ,CAAMoB,GACRkB,OAAO6G,eAAelN,KAAM,OAAQ,CAClC8U,cAAc,EACd3H,YAAY,EACZhI,QACA0P,UAAU,GAEb,CAED,QAAAnM,GACE,MAAO,GAAG1I,KAAK+U,SAASP,OAASxU,KAAKiV,SACvC,EAEL,CA+BA,SAASC,EAAuBvL,GAC9B,IAAImC,EAAM,GACNnM,EAAIgK,EAAI7I,OACZ,MAAMmD,EAAmB,MAAX0F,EAAI,GAAa,EAAI,EACnC,KAAOhK,GAAKsE,EAAQ,EAAGtE,GAAK,EAC1BmM,EAAM,IAAInC,EAAI1C,MAAMtH,EAAI,EAAGA,KAAKmM,IAElC,MAAO,GAAGnC,EAAI1C,MAAM,EAAGtH,KAAKmM,GAC9B,CAYA,SAAS0D,EAAYrK,EAAO0G,EAAKwC,EAAKjI,EAAK/B,EAAQyC,GACjD,GAAI3B,EAAQkJ,GAAOlJ,EAAQ0G,EAAK,CAC9B,MAAMpC,EAAmB,iBAARoC,EAAmB,IAAM,GAC1C,IAAIsJ,EAWJ,MARIA,EAFArO,EAAa,EACH,IAAR+E,GAAaA,IAAQ4D,OAAO,GACtB,OAAOhG,YAAYA,QAA2B,GAAlB3C,EAAa,KAAS2C,IAElD,SAASA,QAA2B,GAAlB3C,EAAa,GAAS,IAAI2C,iBACtB,GAAlB3C,EAAa,GAAS,IAAI2C,IAGhC,MAAMoC,IAAMpC,YAAY4E,IAAM5E,IAElC,IAAI6K,EAAOc,iBAAiB,QAASD,EAAOhQ,EACnD,EAtBH,SAAsBiB,EAAK/B,EAAQyC,GACjCqK,EAAe9M,EAAQ,eACH4D,IAAhB7B,EAAI/B,SAAsD4D,IAA7B7B,EAAI/B,EAASyC,IAC5CwK,EAAYjN,EAAQ+B,EAAItF,QAAUgG,EAAa,GAEnD,CAkBEuO,CAAYjP,EAAK/B,EAAQyC,EAC3B,CAEA,SAASqK,EAAgBhM,EAAO4P,GAC9B,GAAqB,iBAAV5P,EACT,MAAM,IAAImP,EAAOgB,qBAAqBP,EAAM,SAAU5P,EAE1D,CAEA,SAASmM,EAAanM,EAAOrE,EAAQqH,GACnC,GAAIlD,KAAKM,MAAMJ,KAAWA,EAExB,MADAgM,EAAehM,EAAOgD,GAChB,IAAImM,EAAOc,iBAAiBjN,GAAQ,SAAU,aAAchD,GAGpE,GAAIrE,EAAS,EACX,MAAM,IAAIwT,EAAOiB,yBAGnB,MAAM,IAAIjB,EAAOc,iBAAiBjN,GAAQ,SACR,MAAMA,EAAO,EAAI,YAAYrH,IAC7BqE,EACpC,CAvFAoP,EAAE,4BACA,SAAUQ,GACR,OAAIA,EACK,GAAGA,gCAGL,gDACR,GAAE5O,YACLoO,EAAE,wBACA,SAAUQ,EAAMhO,GACd,MAAO,QAAQgO,4DAA+DhO,GAC/E,GAAEN,WACL8N,EAAE,oBACA,SAAUrJ,EAAKiK,EAAOK,GACpB,IAAIC,EAAM,iBAAiBvK,sBACvBwK,EAAWF,EAWf,OAVI/K,OAAOkL,UAAUH,IAAUvQ,KAAKI,IAAImQ,GAAS,GAAK,GACpDE,EAAWR,EAAsB/K,OAAOqL,IACd,iBAAVA,IAChBE,EAAWvL,OAAOqL,IACdA,EAAQ/F,OAAO,IAAMA,OAAO,KAAO+F,IAAU/F,OAAO,IAAMA,OAAO,QACnEiG,EAAWR,EAAsBQ,IAEnCA,GAAY,KAEdD,GAAO,eAAeN,eAAmBO,IAClCD,CACR,GAAEtP,YAiEL,MAAMyP,EAAoB,oBAgB1B,SAAS9M,EAAanC,EAAQ4E,GAE5B,IAAIS,EADJT,EAAQA,GAASvG,IAEjB,MAAMlE,EAAS6F,EAAO7F,OACtB,IAAI+U,EAAgB,KACpB,MAAM1G,EAAQ,GAEd,IAAK,IAAIxP,EAAI,EAAGA,EAAImB,IAAUnB,EAAG,CAI/B,GAHAqM,EAAYrF,EAAOxD,WAAWxD,GAG1BqM,EAAY,OAAUA,EAAY,MAAQ,CAE5C,IAAK6J,EAAe,CAElB,GAAI7J,EAAY,MAAQ,EAEjBT,GAAS,IAAM,GAAG4D,EAAMzL,KAAK,IAAM,IAAM,KAC9C,QACV,CAAe,GAAI/D,EAAI,IAAMmB,EAAQ,EAEtByK,GAAS,IAAM,GAAG4D,EAAMzL,KAAK,IAAM,IAAM,KAC9C,QACD,CAGDmS,EAAgB7J,EAEhB,QACD,CAGD,GAAIA,EAAY,MAAQ,EACjBT,GAAS,IAAM,GAAG4D,EAAMzL,KAAK,IAAM,IAAM,KAC9CmS,EAAgB7J,EAChB,QACD,CAGDA,EAAkE,OAArD6J,EAAgB,OAAU,GAAK7J,EAAY,MACzD,MAAU6J,IAEJtK,GAAS,IAAM,GAAG4D,EAAMzL,KAAK,IAAM,IAAM,KAMhD,GAHAmS,EAAgB,KAGZ7J,EAAY,IAAM,CACpB,IAAKT,GAAS,GAAK,EAAG,MACtB4D,EAAMzL,KAAKsI,EACjB,MAAW,GAAIA,EAAY,KAAO,CAC5B,IAAKT,GAAS,GAAK,EAAG,MACtB4D,EAAMzL,KACJsI,GAAa,EAAM,IACP,GAAZA,EAAmB,IAE3B,MAAW,GAAIA,EAAY,MAAS,CAC9B,IAAKT,GAAS,GAAK,EAAG,MACtB4D,EAAMzL,KACJsI,GAAa,GAAM,IACnBA,GAAa,EAAM,GAAO,IACd,GAAZA,EAAmB,IAE3B,KAAW,MAAIA,EAAY,SASrB,MAAM,IAAI9K,MAAM,sBARhB,IAAKqK,GAAS,GAAK,EAAG,MACtB4D,EAAMzL,KACJsI,GAAa,GAAO,IACpBA,GAAa,GAAM,GAAO,IAC1BA,GAAa,EAAM,GAAO,IACd,GAAZA,EAAmB,IAItB,CACF,CAED,OAAOmD,CACT,CA2BA,SAASpG,EAAemC,GACtB,OAAOS,EAAOmK,YAxHhB,SAAsB5K,GAMpB,IAFAA,GAFAA,EAAMA,EAAI6K,MAAM,KAAK,IAEXxH,OAAOD,QAAQsH,EAAmB,KAEpC9U,OAAS,EAAG,MAAO,GAE3B,KAAOoK,EAAIpK,OAAS,GAAM,GACxBoK,GAAY,IAEd,OAAOA,CACT,CA4G4B8K,CAAY9K,GACxC,CAEA,SAASF,EAAYiL,EAAKC,EAAK7R,EAAQvD,GACrC,IAAInB,EACJ,IAAKA,EAAI,EAAGA,EAAImB,KACTnB,EAAI0E,GAAU6R,EAAIpV,QAAYnB,GAAKsW,EAAInV,UADpBnB,EAExBuW,EAAIvW,EAAI0E,GAAU4R,EAAItW,GAExB,OAAOA,CACT,CAKA,SAAS2H,EAAYQ,EAAKK,GACxB,OAAOL,aAAeK,GACZ,MAAPL,GAAkC,MAAnBA,EAAI6M,aAA+C,MAAxB7M,EAAI6M,YAAYI,MACzDjN,EAAI6M,YAAYI,OAAS5M,EAAK4M,IACpC,CACA,SAAS7M,EAAaJ,GAEpB,OAAOA,GAAQA,CACjB,CAIA,MAAMoH,EAAsB,WAC1B,MAAMiH,EAAW,mBACXC,EAAQ,IAAItS,MAAM,KACxB,IAAK,IAAInE,EAAI,EAAGA,EAAI,KAAMA,EAAG,CAC3B,MAAM0W,EAAU,GAAJ1W,EACZ,IAAK,IAAIC,EAAI,EAAGA,EAAI,KAAMA,EACxBwW,EAAMC,EAAMzW,GAAKuW,EAASxW,GAAKwW,EAASvW,EAE3C,CACD,OAAOwW,CACR,CAV2B,GAa5B,SAASlF,EAAoBoF,GAC3B,MAAyB,oBAAX7G,OAAyB8G,EAAyBD,CAClE,CAEA,SAASC,IACP,MAAM,IAAIrV,MAAM,uBAClB;yFCvjEA,MAAMsV,EAAU,IAAIC,YACdC,EAAU,IAAIC,YAGPC,EAAKC,EACX,SAASA,EAAa1O,EAAM2O,EAAY,GAC7C,IAAIxW,EACJ,QAAa2H,IAATE,GAAsC,iBAATA,GAA0C,iBAAd2O,EAC3D,MAAMrQ,UAAU,sCAsClB,OApCA0B,EAAOA,EAAK4O,eAEHlI,SAAS,MAChBvO,EAASuF,EAAAA,OAAOE,MAAM,GAClBoC,EAAK0G,SAAS,KAAMvO,EAAOmT,UAAUqD,GACpCxW,EAAOmS,WAAWqE,IACd3O,EAAK0G,SAAS,OACvBvO,EAASuF,EAAAA,OAAOE,MAAM,GAClBoC,EAAK0G,SAAS,KACZ1G,EAAK0G,SAAS,KAAMvO,EAAOoT,aAAaoD,GACvCxW,EAAOqT,aAAamD,GAErB3O,EAAK0G,SAAS,KAAMvO,EAAOqS,cAAcmE,GACxCxW,EAAOuS,cAAciE,IAEnB3O,EAAK0G,SAAS,OACvBvO,EAASuF,EAAAA,OAAOE,MAAM,GAClBoC,EAAK0G,SAAS,KACZ1G,EAAK0G,SAAS,KAAMvO,EAAOsT,aAAakD,GACvCxW,EAAOuT,aAAaiD,GAErB3O,EAAK0G,SAAS,KAAMvO,EAAOyS,cAAc+D,GACxCxW,EAAO2S,cAAc6D,IAEnB3O,EAAK0G,SAAS,MACvBvO,EAASuF,EAAAA,OAAOE,MAAM,GAClBoC,EAAK0G,SAAS,KAChBvO,EAAO0T,aAAa8C,GAEpBxW,EAAO2T,aAAa6C,IAEb3O,EAAK0G,SAAS,KACvBvO,EAASuF,EAAAA,OAAOhE,KAAKsI,OAAO2M,IAE5B9J,QAAQxH,IAAI,iBAAiB2C,mBAAsB2O,KAE9CxW,CACT,CAGO,MAAM0W,EAAKC,EACX,SAASA,EAAWlC,EAAMmC,EAAYJ,GAC3C,IAAIxW,EACA6W,EAAa,IACjB,GAA0B,iBAAfD,EACgB,iBAAdJ,GACTxW,EAASuF,EAAAA,OAAOE,MAAMmR,GACJ,IAAdJ,GAAiBxW,EAAOgN,KAAKwJ,GACjCK,EAAa,MAEb7W,EAASuF,EAAAA,OAAOhE,KAAKsI,OAAO+M,IAC5BC,EAAa,UAEV,GAA0B,iBAAfD,GAAgD,iBAAdJ,EAClDK,EAAaD,EAAWH,cACxBzW,EAASuW,EAAaK,EAAYJ,QAC7B,GAA0B,iBAAfI,QAAyCjP,IAAd6O,EAC3CxW,EAASuF,EAAAA,OAAOhE,KAAKqV,GACrBC,EAAa,SACR,GAAID,aAAsB3W,iBAA4B0H,IAAd6O,EAG7CxW,EAAU4W,aAAsBrR,EAAMA,OAAIqR,EAAarR,EAAMA,OAAChE,KAAKqV,QAC9D,GAAIA,aAAsB/P,kBAA6Bc,IAAd6O,EAE9CxW,EAASuF,EAAAA,OAAOhE,KAAKqV,QAChB,GAAI/P,YAAYC,OAAO8P,GAC5B5W,EAASuF,EAAAA,OAAOhE,KAAKqV,EAAW5W,OAAQ4W,EAAWzP,WAAYyP,EAAWpQ,iBACrE,GAA0B,iBAAfoQ,QAAyCjP,IAAd6O,EAC3CxW,EAASuF,EAAMA,OAAChE,KAAKuV,KAAKC,UAAUH,IACpCC,EAAa,QACR,IAA0B,kBAAfD,QAA0CjP,IAAd6O,EAK5C,MAAMrQ,UAAU,4BALqD,CACrE,MAAM3H,EAAIoY,EAAa,EAAI,EAC3B5W,EAASuF,EAAMA,OAAChE,KAAK,CAAC/C,IACtBqY,EAAa,GACjB,CAEG,CAID,MAFoB,iBAATpC,GAAqBA,EAAKlG,SAAS,OAAMkG,EAAO,IAEpD,CAACA,EAAMoC,EAAY7W,EAC5B,CAEO,MAAMgX,EAAMC,EACZ,SAASA,KAAuBC,GACrC,IAAI7X,EAAI,EAcR,OAbY6X,EAAKC,KACfzW,IACE,MAAM0W,EAAY/X,IAElB,MAAoB,iBAATqB,EAEFgW,EAAGU,EAAW,IAAK1W,GAGnBgW,EAAGU,EAAW1W,EACtB,GAIP,CAEO,SAAS2W,EAAcxP,GAG5B,IAFAA,EAAOA,EAAK4O,eAEHlI,SAAS,KAChB,OAAI1G,EAAK0G,SAAS,KACT,OAEA,QAEJ,GAAI1G,EAAK0G,SAAS,MACvB,OAAI1G,EAAK0G,SAAS,KACZ1G,EAAK0G,SAAS,KACT,WAEA,WAGL1G,EAAK0G,SAAS,KACT,YAEA,YAGN,GAAI1G,EAAK0G,SAAS,MACvB,OAAI1G,EAAK0G,SAAS,KACZ1G,EAAK0G,SAAS,KACT,WAEA,WAGL1G,EAAK0G,SAAS,KACT,YAEA,YAGN,GAAI1G,EAAK0G,SAAS,KACvB,OAAI1G,EAAK0G,SAAS,KACT,WAEA,WAEJ,GAAa,MAAT1G,EACT,MAAO,SACF,GAAa,MAATA,EACT,MAAO,SACF,GAAa,MAATA,EACT,MAAO,SACF,GAAa,MAATA,EACT,MAAO,SACF,GAAa,MAATA,EACT,MAAO,UAEP,MAAM1B,UAAU,oBAGpB,CAEO,SAASmR,EAAgBC,EAAYvX,EAAQ+D,EAAQvD,GAE1D,MAAMqH,EAAOwP,EAAcE,GAE3B,GAAY,QAAR1P,EAAgB,OAAO7H,EAAOoR,SAASrN,GACtC,GAAa,UAAT8D,EAAkB,OAAO7H,EAAOkQ,UAAUnM,GAC9C,GAAa,aAAT8D,EAAqB,OAAO7H,EAAOqR,YAAYtN,GACnD,GAAa,aAAT8D,EAAqB,OAAO7H,EAAOsR,YAAYvN,GACnD,GAAa,cAAT8D,EAAsB,OAAO7H,EAAOoQ,aAAarM,GACrD,GAAa,cAAT8D,EAAsB,OAAO7H,EAAOsQ,aAAavM,GACrD,GAAa,aAAT8D,EAAqB,OAAO7H,EAAOuR,YAAYxN,GACnD,GAAa,aAAT8D,EAAqB,OAAO7H,EAAOwR,YAAYzN,GACnD,GAAa,cAAT8D,EAAsB,OAAO7H,EAAOuQ,aAAaxM,GACrD,GAAa,cAAT8D,EAAsB,OAAO7H,EAAOyQ,aAAa1M,GACrD,GAAa,aAAT8D,EAAqB,OAAO7H,EAAO2R,YAAY5N,GACnD,GAAa,aAAT8D,EAAqB,OAAO7H,EAAO4R,YAAY7N,GAEnD,GAAa,WAAT8D,EACP,OAAO7H,EAAO4P,SAAS7L,EAAQA,EAASvD,GACnC,GAAa,WAATqH,EAAmB,CAC5B,MAAM2P,EAAYxX,EAAO4P,SAAS7L,EAAQA,EAASvD,GACnD,OAAO4V,EAAQqB,OAAOD,EAC1B,CAAS,GAAa,WAAT3P,EAAmB,CAC5B,MAAM6P,EAAY1X,EAAO4P,SAAS7L,EAAQA,EAASvD,GACnD,OAAO2J,OAAOiM,EAAQqB,OAAOC,GACjC,CAAS,GAAa,WAAT7P,EAOJ,IAAa,YAATA,EAAoB,CAE7B,OAAa,IADH7H,EAAOoR,SAASrN,EAE9B,CACI,MAAMoC,UAAU,eACjB,CAZ6B,CAC5B,MAAMwR,EAAa3X,EAAO4P,SAAS7L,EAAQA,EAASvD,GACpD,IACE,OAAOsW,KAAKc,MAAMxB,EAAQqB,OAAOE,GAClC,CAAC,MAAOhL,GACPD,QAAQxH,IAAI,iBACb,CACL,CAMA,CAWO,SAAS2S,KAAQX,GACtB,MAAMY,EAVR,SAAsBZ,GACpB,IAAIa,EAAS,GAKb,OAJgBb,EAAKc,QAAOC,IAC1B,IAAIzU,MAAMsE,QAAQmQ,EAAK,IAClB,OAAOA,EADgBF,EAASA,EAAOzK,OAAO2K,EACvCA,IAEC3K,OAAOyK,EACxB,CAGiBG,CAAahB,GAC5B,IAAIhP,EAAO,EACX,MAAMiQ,EAAO,GACb,IAkBIC,EACAC,EAnBAtU,EAAS,EAqBb,GAnBA+T,EAAOQ,SAAQC,IACb,MAAO9D,EAAM5M,EAAMnH,GAAQ6X,EAC3BrQ,GAAQxH,EAAK8F,YAEO,iBAATiO,GAAqBA,EAAKjU,OAAS,IAK9C2X,EAAK/U,KAAK,CAACqR,EAAM5M,EAAM9D,EAAQrD,EAAK8F,aAGpCzC,EAASmE,CAAI,IAOXiQ,EAAK3X,OAAS,EAAG,CACnB,IAAIgY,EAAU1B,KAAKC,UAAUoB,GAE7BC,EAAclC,EAAQuC,OAAOD,GAC7BH,EAAWD,EAAY5R,WACvB0B,EAAOA,EAAOmQ,EAAW,CAC1B,CAED,MAAMrY,EAASuF,EAAAA,OAAOE,MAAMyC,GAQ5B,GAPAnE,EAAS,EACT+T,EAAOQ,SAAQC,IACb,MAAMzS,EAAMyS,EAAQ,GACpBvY,EAAOwN,IAAI1H,EAAK/B,GAChBA,GAAU+B,EAAIU,UAAU,IAGtB2R,EAAK3X,OAAS,EAAG,CACnBR,EAAOwN,IAAI4K,EAAarU,GACxB,MAAM2U,EAAepC,EAAG,KAAM+B,GAE9B,OADArY,EAAOwN,IAAIkL,EAAc3U,EAASsU,GAC3BrY,CACX,CACI,OAAOA,CAEX,CAaO,SAAS2Y,EAAOC,EAASC,GAE9B,MAAMC,EAAUD,GAAQE,EAAQH,GAChC,IAAKE,EAAS,OAEd,MAAM9Y,EAASuF,EAAAA,OAAOhE,KAAKqX,GACrBI,EAAS,CAAE,EACjB,IAAIC,EAAc,EAWlB,GAVAH,EAAQR,SAAQC,IACd,MAAO9D,EAAM5M,EAAM9D,EAAQvD,GAAU+X,EACrCS,EAAOvE,GAAQ6C,EAAgBzP,EAAM7H,EAAQ+D,EAAQvD,GAEjDA,IAAQyY,GAAezY,EAAM,IAM9BqY,GAAQ7Y,EAAOwG,aAAeyS,EAAa,CAC9C,IAAIC,EAAWlZ,EAAOwG,WAAayS,EAEnCD,EAAgB,QAAI1B,EAAgB,IAAKtX,EAAQiZ,EAAaC,EAC/D,CAGD,IAAIC,EAAW,EACXjC,EAAO,GACX,KAAO8B,EAAOG,IACZjC,EAAK9T,KAAM4V,EAAOG,MAQpB,OALIjC,EAAK1W,OAAS,IAChBwY,EAAO9B,KAAOA,EACd8B,EAAOI,EAAIJ,EAAO9B,MAGb8B,CAET,CAIO,MAAMK,EAAKC,EAOX,SAASA,EAAgB5Y,EAAM6Y,GAAmB,GACvD,QAAa5R,IAATjH,EAAoB,MAAMyF,UAAU,gCACxC,GAAoB,iBAATzF,EACT,OAAOwV,EAAQuC,OAAO/X,GACjB,GAAoB,iBAATA,EAChB,OAAOT,WAAWsB,KAAK,CAACb,IACnB,GAAIA,aAAgBmG,YAAa,CACtC,GAAI0S,EACF,OAAO,IAAItZ,WAAWS,GACjB,CACL,MAAM8Y,EAAa,IAAIvZ,WAAWS,GAC5B+Y,EAAW,IAAIxZ,WAAWS,EAAK8F,YAErC,OADAiT,EAASjM,IAAIgM,GACNC,CACR,CACF,CAAM,GAAI5S,YAAYC,OAAOpG,GAAO,CACnC,GAAI6Y,EACF,OAAO,IAAItZ,WAAWS,EAAKV,OAAQU,EAAKyG,WAAYzG,EAAK8F,YACpD,CAEL,MAAMgT,EAAa,IAAIvZ,WAAWS,EAAKV,OAAQU,EAAKyG,WAAYzG,EAAK8F,YAC/DiT,EAAW,IAAIxZ,WAAWS,EAAK8F,YAErC,OADAiT,EAASjM,IAAIgM,GACNC,CACR,CACL,CACI,OAAOvD,EAAQuC,OAAO3B,KAAKC,UAAUrW,GAEzC,CAEO,MAAMgZ,EAAKC,EAEX,SAASA,EAAYjZ,EAAM6Y,GAAmB,GAEnD,MAAMK,EAAKN,EAAgB5Y,EAAM6Y,GACjC,OAAIA,EACKhU,EAAMA,OAAChE,KAAMqY,EAAG5Z,OAAQ4Z,EAAGzS,WAAYyS,EAAGpT,YAE1CjB,EAAMA,OAAChE,KAAKqY,EAEvB,CAEO,MAAMC,EAASC,EACf,SAASA,KAAyBC,GACvC,MAAMC,EAAUD,EAAU5C,KAAIzW,GAAQiZ,EAAYjZ,KAClD,OAAO6E,EAAMA,OAAC+H,OAAQ0M,EACxB,CAGO,MAAMC,EAASC,EAOf,SAASA,KAAwBH,GACtC,IACE,IAAII,EAAa,EACbpW,EAAS,EACb,MAAMiW,EAAUD,EAAU5C,KAAIzW,GAAQ4Y,EAAgB5Y,KACtDsZ,EAAQ1B,SAAQxS,IAASqU,GAAcrU,EAAIU,UAAA,IAC3C,MAAMxG,EAAS,IAAIC,WAAWka,GAK9B,OAJAH,EAAQ1B,SAAQxS,IACd9F,EAAOwN,IAAI1H,EAAK/B,GAChBA,GAAU+B,EAAIU,UAAU,IAEnBxG,CACR,CAAC,MAAO2M,GACPD,QAAQxH,IAAIyH,EACb,CACH,CAEO,SAASyN,EAAIpa,GAClB,OAAOwD,MAAMlD,UAAU6W,IAAI3N,KAAK,IAAIvJ,WAAWD,IAASoN,IAAM,KAAOA,EAAEhF,SAAS,KAAKzB,OAAO,KAAIpD,KAAK,GACvG,CAaO,SAAS8W,EAAczB,GAC5B,OAA6B,IAAzB0B,EAAY1B,GACPA,EAAQpS,WAERoS,EAAQpS,WAAa8T,EAAY1B,GAAW2B,CAGvD,CAGO,SAASC,EAAc5B,EAASP,GAErC,IACE,MAAMrY,EAAS,IAAIC,WAAW2Y,EAAQ5Y,OAAQ4Y,EAAQzR,WAAYyR,EAAQpS,YACpEiU,EAAWza,EAAOwG,WAAa6R,EAAW,EAC1CD,EAAcpY,EAAO4P,SAAS6K,EAAUza,EAAOwG,WAAa,GAC5DkU,EAAUtE,EAAQqB,OAAOW,GACzBD,EAAOrB,KAAKc,MAAM8C,GAExB,IAAKlX,MAAMsE,QAAQqQ,KAAU3U,MAAMsE,QAAQqQ,EAAK,IAAK,OAErD,IAAIwC,EAAYxC,EAAK,GACrB,IAAKwC,EAAW,OAEhB,GAAIA,EAAUna,OAAS,EAAG,OAC1B,MAAOiU,EAAM5M,EAAM9D,GAAU4W,EAE7B,GAAqB,iBAAT9S,GAAuC,iBAAX9D,EAAqB,OAE7D,OAAOoU,CACR,CAAC,MAAOxL,GAER,CACH,CAQO,MAAM4N,EAAW,EAOjB,SAASK,EAAShC,GAIvB,GAHIA,aAAmB/R,cACrB+R,EAAUrT,EAAAA,OAAOhE,KAAKqX,IAEpBA,aAAmB3Y,WAAY,CACjC,GAAI2Y,EAAQpS,YAAc+T,EAAU,OAAO,EAI3C,OAFW,IAAIM,SAASjC,EAAQ5Y,OAAQ4Y,EAAQzR,WAAYyR,EAAQpS,YAChDsU,UAAUlC,EAAQpS,WAAa+T,EAGvD,CAEI,OAAO,CAGX,CAOO,SAASD,EAAY1B,GAI1B,GAHIA,aAAmB/R,cACrB+R,EAAUrT,EAAAA,OAAOhE,KAAKqX,IAEpBA,aAAmB3Y,WAAY,CAEjC,MAAMiI,EAAO0Q,EAAQpS,WACrB,GAAI0B,GAAQqS,EAAU,OAAO,EAG7B,MAAMlC,EAAWuC,EAAShC,GAC1B,GAAiB,IAAbP,GAAkBA,EAAWnQ,EAAM,OAAO,EAI9C,OAFgBsS,EAAc5B,EAASP,GAEnBA,EACR,CAChB,CACI,OAAO,CAEX,CAQO,SAAS0C,EAAUnC,GACxB,MAAMoC,EAAgBX,EAAczB,GACpC,OAAOA,EAAQhJ,SAAS,EAAGoL,EAC7B,CAWO,SAASjC,EAAQH,EAASqC,GAAa,GACxCrC,aAAmB/R,cACrB+R,EAAUrT,EAAAA,OAAOhE,KAAKqX,IAExB,MAAMP,EAAWuC,EAAShC,GAC1B,GAAiB,IAAbP,EAAgB,OAGpB,IAAI6C,EAAWV,EAAc5B,EAASP,GACtC,OAAK6C,EAEAD,GAIHC,EAAS5C,SAAQC,IAEJ5Q,MADC4Q,EAAQ,KAEdA,EAAQ,GAAGhK,SAAS,KAAMgK,EAAQ,GAAK,EAClCA,EAAQ,GAAGhK,SAAS,MAAOgK,EAAQ,GAAK,EACxCA,EAAQ,GAAGhK,SAAS,OACpBgK,EAAQ,GAAGhK,SAAS,KADOgK,EAAQ,GAAK,EAExCA,EAAQ,GAAGhK,SAAS,OAAMgK,EAAQ,GAAK,IAElDA,EAAQ,GAAKlB,EAAckB,EAAQ,GAAG,IAEjC2C,GAdAA,OAHT,CAmBF,gSAxJO,SAAeC,EAAMC,GAC1B,GAAID,EAAK3U,aAAe4U,EAAK5U,WAAY,OAAO,EAChD,IAAK,IAAInH,EAAI,EAAGA,EAAI8b,EAAK3U,WAAYnH,IACnC,GAAI8b,EAAK9b,KAAO+b,EAAK/b,GAAI,OAAO,EAElC,OAAO,CACT,oGAoJO,YAAqB6X,GAC1B,OAAO6D,EAAWlD,KAAQX,GAC5B,OAEO,YAAkBA,GACvB,OAAO6B,EAASlB,KAAQX,GAC1B,aAEO,YAAwBA,GAC7B,OAAO6B,EAASlB,KAAQX,IAAQ,EAClC,gBAIO,SAAuB0B,GAC5B,OAAOG,EAAQH,GAAS,EAC1B,IClkBAyC,EAAOtZ,KAAO,SAAUrB,GACtB,OAAO2a,EAAOC,EAAO5a,GACvB,EAEA2a,EAAOjB,IAAM,SAAU1Z,GACrB,OAAO6a,EAAQF,EAAOtZ,KAAKrB,GAC7B,EAEA2a,EAAOG,KAAO,SAAU/Z,EAAKf,GAC3B,OL6RK,SAAee,EAAKf,GACzB,MAAMvB,EAAI,IAAKqC,EAAKC,GAAMhB,OAAOC,GAC3BU,EAASjC,EAAEiC,SAEjB,OADAjC,EAAEoB,QACKa,CACT,CKlSSoa,CAAKF,EAAO7Z,GAAM6Z,EAAO5a,GAClC,ECPoB4E,EAAAmW,eAAA,EAEpB,MAAMvF,EAAU,IAAIC,YACJ,IAAIE,YAEpB,IAAIqF,GAAS,EACb,IACEA,EAA4D,qBAAnD3V,OAAOzF,UAAU8H,SAASoB,KAAKmS,OAAOC,QACjD,CAAE,MAAO5c,GAAM,CAGf,IACM0c,GACFhP,QAAQxH,IAAI,kBACZuW,EAAAA,UAAYI,WAEsB,mBAAlBC,eAChBL,EAASA,UAAGM,KAAKC,OACjBtP,QAAQxH,IAAI,qBAEiB,oBAAb+W,WAChBR,EAASA,UAAGS,OAAOF,OACnBtP,QAAQxH,IAAI,iBAGhB,CAAE,MAAOyH,GACPD,QAAQxH,IAAI,kBAAmByH,EACjC,CAsCO,SAASwP,EAAchT,GAC5B,MAAM5J,EAAK6c,YAAYC,MACvB,IAAIvW,EAAM,IAAI7F,WAAW,IACzB,IAAK,IAAIZ,EAAI,EAAGA,EAAI8J,EAAG9J,IACrByG,EAAMuV,EAAOtZ,KAAK+D,GAGpB,OAAY,IAAJqD,GADGiT,YAAYC,MAAQ9c,IACR+c,QAAQ,EACjC,CAYA,MAAMC,GAAOd,EAAAA,UAAUe,gBAAgB,IAAIvc,WAAW,IACtDwb,EAAAA,UAAUgB,OAAOrb,OAAO,UAAWmb,IAAMG,MAAKC,IAG5C,GAFcpB,EAAQoB,KACRtB,EAAOjB,IAAImC,IAIvB,MAAM,IAAI3b,MAAM,uBACjB,IChGH,MAAMwV,GAAU,IAAIC,YAEb,SAASuG,GAAK1U,GACjB,OAAOuT,EAASA,UAACe,gBAAgBjX,EAAMA,OAACE,MAAMyC,GAClD,CAcO,SAAS2U,GAAKnc,EAAMoc,EAAeC,EAAgB,EAAGC,GAAkB,GAC3E,KAAMF,aAAyB7c,aAA8C,KAA7B6c,EAActW,WAC1D,MAAM,IAAIL,UAAU,2CAGxB,KAAMzF,aAAgBT,YAClB,MAAM,IAAIkG,UAAU,gCAGxB,GAA6B,iBAAlB4W,EACP,MAAM,IAAI5W,UAAU,gDAGxB,GAA+B,kBAApB6W,EACP,MAAM,IAAI7W,UAAU,iDAGxB,MAAM8W,EAAkB1X,EAAMA,OAAC+H,OAAQ,CAAEwP,EAAeI,EAAO,MAAOH,KAKtE,IAAIpe,GAFJ+B,EAAO4a,EAAO5a,EAAMsc,IAELxW,WACX2W,EAAWJ,EACXK,EAAa,EACbC,EAAa,EAEjB,KAAO1e,EAAM,GAAG,CACZ0e,EAAa1e,EAAM,GAAKA,EAAM,GAC9Bse,EAAgBvK,gBAAgByK,EAAU,IAC1C,IAAIG,EAAOjC,EAAOtZ,KAAMkb,GACxB,IAAI,IAAI5d,EAAI,EAAGA,EAAIge,EAAahe,IAC5BqB,EAAM0c,MAAkBE,EAAKje,GAEjCV,GAAO,EACV,CACD,OAAO+B,CACX,CAmEO,SAAS6c,GAAQvd,GAAU,OAAOwD,MAAMlD,UAAU6W,IAAI3N,KAAK,IAAIvJ,WAAWD,IAASoN,IAAM,KAAOA,EAAEhF,SAAS,KAAKzB,OAAO,KAAIpD,KAAK,GAAK,CAErI,SAASia,GAAMrC,EAAMC,GACxB,GAAID,EAAK3U,aAAe4U,EAAK5U,WAAY,OAAO,EAChD,IAAK,IAAInH,EAAI,EAAGA,EAAI8b,EAAK3U,WAAYnH,IACjC,GAAI8b,EAAK9b,KAAO+b,EAAK/b,GAAI,OAAO,EAEpC,OAAO,CACX,CAQO,SAASoe,GAAWC,EAASvU,GAChC,IAAIwU,EAAUtC,EAAOtZ,KAAK2b,GAC1B,IAAK,IAAIre,EAAI,EAAGA,EAAI8J,EAAG9J,IAAKse,EAAUtC,EAAOtZ,KAAK4b,GAClD,OAAOA,CACX,CAEY,MAACC,GAAazB,EAAa,KClJvC,MAAM0B,GAAKpC,EAASA,UAACgB,sGA8FdqB,eAAuBC,EAASC,GAEnC,MAAMnG,EAAOoG,EAAWF,GAClBG,QAAeL,GAAGM,UACpB,MACA7C,EAAO0C,GACP,CAAEvJ,KAAM,WACR,EACA,CAAC,cAGChT,QAAYoc,GAAGO,UACjB,CACI3J,KAAQ,SACR4J,KAAMxG,EAAKwG,KACXC,WAAczG,EAAKyG,WACnBvc,KAAQ,WAEZmc,EACA,CAAEzJ,KAAQ,UAAWjU,OAAU,MAC/B,EACA,CAAC,UAAW,YAahB,OADkByd,QATeJ,GAAGU,QAChC,CACI9J,KAAM,UACN+J,GAAI3G,EAAK2G,IAEb/c,EACAoW,EAAK4G,UAIQC,QACrB,mBD7BO,SAAwBC,EAAQld,GACnC,MAAMmd,EAASX,EAAW1Y,EAAAA,OAAOhE,KAAKod,EAAQ,WAE9C,GAAIC,EAAOC,OAAS,GAEhB,OADAnS,QAAQxH,IAAI,4BAA8B0Z,EAAOC,QAC1C,mBAEX,MACMC,EAAUrB,GADAF,GAAQqB,EAAOP,MACM5c,EAAK,GAAKmd,EAAOC,QAEhDE,EAASlC,GAAK+B,EAAOI,OAAQF,EAAS,GACtCtD,EAAOH,EAAOG,KAAKsD,EAASC,GAElC,IACI,MAAMlH,EAAOoG,EAAWc,GACxB,GAAoB,iBAATlH,EAAmB,CAC1B,IAAK2F,GAAMhC,EAAMoD,EAAOpD,MAAO,OAE/B,OADYpF,GAAQqB,OAAOI,EAAK1C,IAEnC,CACJ,CAAC,MAAOxI,GACR,CACL,YCnGOmR,eAAuBpd,EAAMsd,EAAYM,EAAa,KAEzD,MAAMW,EAAW1U,SAASqS,GAAK,GAAG,GAAK,GACjCsC,EAAatC,GAAKqC,GAIlBE,EAAqBC,EACvBC,EAAO,cAAeH,GACtBG,EAAO,WAAY3e,IAGjB2d,EAAOzB,GAAK,IACZ4B,EAAK5B,GAAK,IAIVsB,QAAeL,GAAGM,UACpB,MACA7C,EAAO0C,GAEP,CAAEvJ,KAAM,WACR,EACA,CAAC,cAGChT,QAAYoc,GAAGO,UACjB,CACI3J,KAAQ,SACR4J,KAAMA,EACNC,WAAcA,EACdvc,KAAQ,WAEZmc,EACA,CAAEzJ,KAAQ,UAAWjU,OAAU,MAC/B,EACA,CAAC,UAAW,YAGVie,QAAgBZ,GAAGyB,QACrB,CACI7K,KAAM,UACN+J,GAAIA,GAER/c,EACA0d,GAGJ,OAAOC,EACHC,EAAO,UAAWZ,GAClBY,EAAO,KAAMb,GACba,EAAO,OAAQhB,GACfgB,EAAO,aAAcf,GAG7B,mBDTO,SAAwBnJ,EAAK1T,EAAKod,EAAS,IAC9C,GAAmB,iBAAR1J,EACP,MAAM,IAAIhP,UAAU,4BAExB,MAAMoZ,EAAYjE,EAAOnG,GACnBkJ,EAAOzB,GAAK,IAEZkC,EAAUrB,GADAF,GAAQc,GACa5c,EAAK,GAAKod,GACzCI,EAAW1U,SAASqS,GAAK,GAAG,GAAK,GACjCsC,EAAatC,GAAKqC,GAElBO,EAAoBJ,EACtBC,EAAO,QAASH,GAChBG,EAAO,MAAOE,IAGZ/D,EAAOH,EAAOG,KAAKsD,EAASU,GAC5BR,EAASnC,GAAK2C,EAAmBV,GASvC,OAPaM,EACTC,EAAO,SAAUL,GACjBK,EAAO,OAAQ7D,GACf6D,EAAO,OAAQhB,GACfgB,EAAO,SAAU,IAAKR,IAGdzW,SAAS,SACzB,sBAoDO,SAAgBqM,EAAM/T,GACzBgM,QAAQxH,IAAIuP,EAAM8G,EAAQ7a,GAC9B,yCDtEO,SAA+ByI,GACpC,MAAMsW,EAAMtD,EAAahT,GACzB,IAAIuW,EACJ,IAAK,IAAIC,EAAa,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAMC,EAAY,EAAGC,EAAUJ,EAAM,KAAMI,EAAU,EAAGA,GAAW,KAAMD,IACjIF,EAAWG,EAAQvD,QAAQ,GAAK,IAAMqD,EAAWC,GAAa,SAAWH,EAAM,cAEjF,MAAO,sBAAwBC,CACjC,6BArDO,WACL,GAAgC,iBAArBjE,EAAAA,UAAUgB,OACnB/P,QAAQxH,IAAI,mCACP,CACLwH,QAAQxH,IAAI,mBACZ,MAAMqX,EAAOd,EAAAA,UAAUe,gBAAgB,IAAIvc,WAAW,IACtDyM,QAAQxH,IAAI,uBAAwBqX,GAEpCd,EAASA,UAACgB,OAAOrb,OAAO,UAAWmb,GAAMG,MAAKC,IAC5C,MAAMmD,EAAQvE,EAAQoB,GAChBoD,EAAQ1E,EAAOjB,IAAImC,GAIzB,GAHA7P,QAAQxH,IAAI,8BACZwH,QAAQxH,IAAI,4BAA6B4a,GACzCpT,QAAQxH,IAAI,iBAAkB6a,GAC1BD,IAAUC,EAGZ,MAAM,IAAInf,MAAM,wBAFhB8L,QAAQxH,IAAI,6BAGb,IAEH,MAAMyP,EAAU4G,EAAQgB,GACxBd,YAAUgB,OAAOrb,OAAO,UAAW8U,EAAQuC,OAAO9D,IAAU+H,MAAKC,IAC/D,MAAMmD,EAAQvE,EAAQoB,GAChBoD,EAAQ1E,EAAOjB,IAAIzF,GAIzB,GAHAjI,QAAQxH,IAAI,8BACZwH,QAAQxH,IAAI,4BAA6B4a,GACzCpT,QAAQxH,IAAI,iBAAkB6a,GAC1BD,IAAUC,EAGZ,MAAM,IAAInf,MAAM,wBAFhB8L,QAAQxH,IAAI,6BAGb,GAEJ,CACH"}